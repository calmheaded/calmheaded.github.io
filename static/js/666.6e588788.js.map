{"version":3,"file":"static/js/666.6e588788.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/PLYLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tColor\n} from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n * Custom properties outside of the defaults for position, uv, normal\n * and color attributes can be added using the setCustomPropertyMapping method.\n * For example, the following maps the element properties “custom_property_a”\n * and “custom_property_b” to an attribute “customAttribute” with an item size of 2.\n * Attribute item sizes are set from the number of element properties in the property array.\n *\n * loader.setCustomPropertyMapping( {\n *\tcustomAttribute: ['custom_property_a', 'custom_property_b'],\n * } );\n *\n */\n\nconst _color = new Color();\n\nclass PLYLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.propertyNameMapping = {};\n\t\tthis.customPropertyMapping = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetPropertyNameMapping( mapping ) {\n\n\t\tthis.propertyNameMapping = mapping;\n\n\t}\n\n\tsetCustomPropertyNameMapping( mapping ) {\n\n\t\tthis.customPropertyMapping = mapping;\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tconst patternHeader = /^ply([\\s\\S]*)end_header(\\r\\n|\\r|\\n)/;\n\t\t\tlet headerText = '';\n\t\t\tlet headerLength = 0;\n\t\t\tconst result = patternHeader.exec( data );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\theaderText = result[ 1 ];\n\t\t\t\theaderLength = new Blob( [ result[ 0 ] ] ).size;\n\n\t\t\t}\n\n\t\t\tconst header = {\n\t\t\t\tcomments: [],\n\t\t\t\telements: [],\n\t\t\t\theaderLength: headerLength,\n\t\t\t\tobjInfo: ''\n\t\t\t};\n\n\t\t\tconst lines = headerText.split( /\\r\\n|\\r|\\n/ );\n\t\t\tlet currentElement;\n\n\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\tconst property = { type: propertValues[ 0 ] };\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t}\n\n\t\t\t\treturn property;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\tconst lineValues = line.split( /\\s+/ );\n\t\t\t\tconst lineType = lineValues.shift();\n\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'obj_info':\n\n\t\t\t\t\t\theader.objInfo = line;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t}\n\n\t\t\treturn header;\n\n\t\t}\n\n\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\tconst values = line.split( /\\s+/ );\n\n\t\t\tconst element = {};\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\t\t\t\t\tconst n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn element;\n\n\t\t}\n\n\t\tfunction createBuffer() {\n\n\t\t\tconst buffer = {\n\t\t\t  indices: [],\n\t\t\t  vertices: [],\n\t\t\t  normals: [],\n\t\t\t  uvs: [],\n\t\t\t  faceVertexUvs: [],\n\t\t\t  colors: [],\n\t\t\t};\n\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t  buffer[ customProperty ] = [];\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t}\n\n\t\tfunction parseASCII( data, header ) {\n\n\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\tconst buffer = createBuffer();\n\n\t\t\tlet result;\n\n\t\t\tconst patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\tlet body = '';\n\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\tbody = result[ 1 ];\n\n\t\t\t}\n\n\t\t\tconst lines = body.split( /\\r\\n|\\r|\\n/ );\n\t\t\tlet currentElement = 0;\n\t\t\tlet currentElementCount = 0;\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElementCount >= header.elements[ currentElement ].count ) {\n\n\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\tcurrentElementCount = 0;\n\n\t\t\t\t}\n\n\t\t\t\tconst element = parseASCIIElement( header.elements[ currentElement ].properties, line );\n\n\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\tcurrentElementCount ++;\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\tfunction postProcess( buffer ) {\n\n\t\t\tlet geometry = new BufferGeometry();\n\n\t\t\t// mandatory buffer data\n\n\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t// optional buffer data\n\n\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t}\n\n\t\t\t// custom buffer data\n\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t\tif ( buffer[ customProperty ].length > 0 ) {\n\n\t\t\t\t  \tgeometry.setAttribute(\n\t\t\t\t\t\tcustomProperty,\n\t\t\t\t\t\tnew Float32BufferAttribute(\n\t\t\t\t\t  \t\tbuffer[ customProperty ],\n\t\t\t\t\t  \t\tscope.customPropertyMapping[ customProperty ].length\n\t\t\t\t\t\t)\n\t\t\t\t  \t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction handleElement( buffer, elementName, element ) {\n\n\t\t\tfunction findAttrName( names ) {\n\n\t\t\t\tfor ( let i = 0, l = names.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst name = names[ i ];\n\n\t\t\t\t\tif ( name in element ) return name;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tconst attrX = findAttrName( [ 'x', 'px', 'posx' ] ) || 'x';\n\t\t\tconst attrY = findAttrName( [ 'y', 'py', 'posy' ] ) || 'y';\n\t\t\tconst attrZ = findAttrName( [ 'z', 'pz', 'posz' ] ) || 'z';\n\t\t\tconst attrNX = findAttrName( [ 'nx', 'normalx' ] );\n\t\t\tconst attrNY = findAttrName( [ 'ny', 'normaly' ] );\n\t\t\tconst attrNZ = findAttrName( [ 'nz', 'normalz' ] );\n\t\t\tconst attrS = findAttrName( [ 's', 'u', 'texture_u', 'tx' ] );\n\t\t\tconst attrT = findAttrName( [ 't', 'v', 'texture_v', 'ty' ] );\n\t\t\tconst attrR = findAttrName( [ 'red', 'diffuse_red', 'r', 'diffuse_r' ] );\n\t\t\tconst attrG = findAttrName( [ 'green', 'diffuse_green', 'g', 'diffuse_g' ] );\n\t\t\tconst attrB = findAttrName( [ 'blue', 'diffuse_blue', 'b', 'diffuse_b' ] );\n\n\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\tbuffer.vertices.push( element[ attrX ], element[ attrY ], element[ attrZ ] );\n\n\t\t\t\tif ( attrNX !== null && attrNY !== null && attrNZ !== null ) {\n\n\t\t\t\t\tbuffer.normals.push( element[ attrNX ], element[ attrNY ], element[ attrNZ ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrS !== null && attrT !== null ) {\n\n\t\t\t\t\tbuffer.uvs.push( element[ attrS ], element[ attrT ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrR !== null && attrG !== null && attrB !== null ) {\n\n\t\t\t\t\t_color.setRGB(\n\t\t\t\t\t\telement[ attrR ] / 255.0,\n\t\t\t\t\t\telement[ attrG ] / 255.0,\n\t\t\t\t\t\telement[ attrB ] / 255.0\n\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\tbuffer.colors.push( _color.r, _color.g, _color.b );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t\t\tfor ( const elementProperty of scope.customPropertyMapping[ customProperty ] ) {\n\n\t\t\t\t\t  buffer[ customProperty ].push( element[ elementProperty ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\tconst vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\tconst texcoord = element.texcoord;\n\n\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryRead( dataview, at, type, little_endian ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\tcase 'int8':\t\tcase 'char':\t return [ dataview.getInt8( at ), 1 ];\n\t\t\t\tcase 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8( at ), 1 ];\n\t\t\t\tcase 'int16':\t\tcase 'short':\t return [ dataview.getInt16( at, little_endian ), 2 ];\n\t\t\t\tcase 'uint16':\tcase 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];\n\t\t\t\tcase 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32( at, little_endian ), 4 ];\n\t\t\t\tcase 'uint32':\tcase 'uint':\t return [ dataview.getUint32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float32': case 'float':\t return [ dataview.getFloat32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryReadElement( dataview, at, properties, little_endian ) {\n\n\t\t\tconst element = {};\n\t\t\tlet result, read = 0;\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );\n\t\t\t\t\tconst n = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );\n\t\t\t\t\t\tlist.push( result[ 0 ] );\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].type, little_endian );\n\t\t\t\t\telement[ properties[ i ].name ] = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn [ element, read ];\n\n\t\t}\n\n\t\tfunction parseBinary( data, header ) {\n\n\t\t\tconst buffer = createBuffer();\n\n\t\t\tconst little_endian = ( header.format === 'binary_little_endian' );\n\t\t\tconst body = new DataView( data, header.headerLength );\n\t\t\tlet result, loc = 0;\n\n\t\t\tfor ( let currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\tfor ( let currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {\n\n\t\t\t\t\tresult = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );\n\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\tconst element = result[ 0 ];\n\n\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\t//\n\n\t\tlet geometry;\n\t\tconst scope = this;\n\n\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst text = LoaderUtils.decodeText( new Uint8Array( data ) );\n\t\t\tconst header = parseHeader( text );\n\n\t\t\tgeometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );\n\n\t\t} else {\n\n\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nexport { PLYLoader };\n"],"names":["_color","PLYLoader","constructor","manager","super","this","propertyNameMapping","customPropertyMapping","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setPropertyNameMapping","mapping","setCustomPropertyNameMapping","data","parseHeader","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","undefined","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","createBuffer","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","customProperty","Object","keys","parseASCII","patternBody","body","currentElementCount","handleElement","postProcess","geometry","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","findAttrName","names","l","attrX","attrY","attrZ","attrNX","attrNY","attrNZ","attrS","attrT","attrR","attrG","attrB","setRGB","convertSRGBToLinear","r","g","b","elementProperty","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","ArrayBuffer","Uint8Array"],"sourceRoot":""}