"use strict";(self.webpackChunkthree_model_viewer=self.webpackChunkthree_model_viewer||[]).push([[812],{2812:function(e,r,t){t.r(r),t.d(r,{USDZLoader:function(){return a}});var n=t(216),i=t(6925);class s{parse(e){var r={};const t=e.split("\n"),n=t.length;let i=0,s=null,a=r;const o=[r];return function e(){var r=t[i];if(r.includes("=")){var p=r.split("="),f=p[0].trim();(p=p[1].trim()).endsWith("{")?(l={},o.push(l),a[f]=l,a=l):a[f]=p}else if(r.endsWith("{")){var l=a[s]||{};o.push(l),a[s]=l,a=l}else if(r.endsWith("}")){if(o.pop(),0===o.length)return;a=o[o.length-1]}else r.endsWith("(")?(f={},o.push(f),s=r.split("(")[0].trim()||s,a[s]=f,a=f):r.endsWith(")")?(o.pop(),a=o[o.length-1]):s=r.trim();++i<n&&e()}(),r}}class a extends n.aNw{constructor(e){super(e)}load(e,r,t,i){const s=this;var a=new n.hH6(s.manager);a.setPath(s.path),a.setResponseType("arraybuffer"),a.setRequestHeader(s.requestHeader),a.setWithCredentials(s.withCredentials),a.load(e,(function(t){try{r(s.parse(t))}catch(t){i&&i(t),s.manager.itemError(e)}}),t,i)}parse(e){const r=new s;e=i.GZ(new Uint8Array(e));const t=function(e){var t,s={};(new n.hH6).setResponseType("arraybuffer");for(const n in e)n.endsWith("png")&&(t=new Blob([e[n]],{type:{type:"image/png"}}),s[n]=URL.createObjectURL(t)),n.endsWith("usd")&&(t=i.T8(e[n]),s[n]=r.parse(t));return s}(e);if(e=function(e){for(const r in e)if(r.endsWith("usda"))return e[r]}(e),void 0===e)return new n.ZAu;e=i.T8(e);const a=r.parse(e);function o(e,r){if(void 0!==r&&(r='def "%{id}"',r in e))return e[r];for(const n in e){var t=e[n];if(n.startsWith("def Mesh"))return"point3f[] points"in e&&(t["point3f[] points"]=e["point3f[] points"]),"float2[] primvars:st"in e&&(t["float2[] primvars:st"]=e["float2[] primvars:st"]),"int[] primvars:st:indices"in e&&(t["int[] primvars:st:indices"]=e["int[] primvars:st:indices"]),t;if("object"==typeof t&&(t=o(t),t))return t}}function p(e){if(e){let t=new n.u9r;var r;return"int[] faceVertexIndices"in e&&(r=JSON.parse(e["int[] faceVertexIndices"]),t.setIndex(new n.TlE(new Uint16Array(r),1))),"point3f[] points"in e&&(r=JSON.parse(e["point3f[] points"].replace(/[()]*/g,"")),r=new n.TlE(new Float32Array(r),3),t.setAttribute("position",r)),"normal3f[] normals"in e?(r=JSON.parse(e["normal3f[] normals"].replace(/[()]*/g,"")),r=new n.TlE(new Float32Array(r),3),t.setAttribute("normal",r)):t.computeVertexNormals(),"float2[] primvars:st"in e&&(e["texCoord2f[] primvars:st"]=e["float2[] primvars:st"]),"texCoord2f[] primvars:st"in e&&(r=JSON.parse(e["texCoord2f[] primvars:st"].replace(/[()]*/g,"")),r=new n.TlE(new Float32Array(r),2),"int[] primvars:st:indices"in e?(t=t.toNonIndexed(),e=JSON.parse(e["int[] primvars:st:indices"]),t.setAttribute("uv",function(e,r){var t=e.array,i=e.itemSize,s=new t.constructor(r.length*i);let a=0,o=0;for(let n=0,p=r.length;n<p;n++){a=r[n]*i;for(let e=0;e<i;e++)s[o++]=t[a++]}return new n.TlE(s,i)}(r,e))):t.setAttribute("uv",r)),t}}function f(e,r=""){for(const n in e){var t=e[n];if(n.startsWith("def Material"+r))return t;if("object"==typeof t&&(t=f(t,r),t))return t}}function l(e,r){for(const n in e){var t=e[n];if(n.startsWith(`def Shader "${r}"`))return t;if("object"==typeof t&&(t=l(t,r),t))return t}}function u(e){var r,i;return"asset inputs:file"in e?(r=e["asset inputs:file"].replace(/@*/g,""),r=(new n.dpR).load(t[r]),i={'"clamp"':n.uWy,'"mirror"':n.OoA,'"repeat"':n.rpg},"token inputs:wrapS"in e&&(r.wrapS=i[e["token inputs:wrapS"]]),"token inputs:wrapT"in e&&(r.wrapT=i[e["token inputs:wrapT"]]),r):null}function c(e){var r,i,s=p(function(e){var r,n;if(e)return"prepend references"in e?(r=(n=e["prepend references"].split("@"))[1].replace(/^.\//,""),n=n[2].replace(/^<\//,"").replace(/>$/,""),o(t[r],n)):o(e)}(e)),c=(d=function(e){var r;if(e)return"rel material:binding"in e?(r=e["rel material:binding"].replace(/^<\//,"").replace(/>$/,"").split("/"),f(a,` "${r[1]}"`)):f(e)}(e),r=new n.Wid,void 0!==d&&('def Shader "PreviewSurface"'in d&&("color3f inputs:diffuseColor.connect"in(i=d['def Shader "PreviewSurface"'])?(c=i["color3f inputs:diffuseColor.connect"],c=l(a,/(\w+).output/.exec(c)[1]),r.map=u(c),r.map.encoding=n.knz):"color3f inputs:diffuseColor"in i&&(c=i["color3f inputs:diffuseColor"].replace(/[()]*/g,""),r.color.fromArray(JSON.parse("["+c+"]"))),"normal3f inputs:normal.connect"in i&&(c=i["normal3f inputs:normal.connect"],c=l(a,/(\w+).output/.exec(c)[1]),r.normalMap=u(c)),"float inputs:roughness"in i&&(r.roughness=parseFloat(i["float inputs:roughness"])),"float inputs:metallic"in i)&&(r.metalness=parseFloat(i["float inputs:metallic"])),'def Shader "diffuseColor_texture"'in d&&(c=d['def Shader "diffuseColor_texture"'],r.map=u(c),r.map.encoding=n.knz),'def Shader "normal_texture"'in d)&&(i=d['def Shader "normal_texture"'],r.normalMap=u(i)),r),d=s?new n.Kj0(s,c):new n.Tme;return"matrix4d xformOp:transform"in e&&(i=JSON.parse("["+e["matrix4d xformOp:transform"].replace(/[()]*/g,"")+"]"),d.matrix.fromArray(i),d.matrix.decompose(d.position,d.quaternion,d.scale)),d}return e=new n.ZAu,function e(r,t){for(const i in r){var n;i.startsWith("def Scope")?e(r[i],t):i.startsWith("def Xform")&&(n=c(r[i]),/def Xform "(\w+)"/.test(i)&&(n.name=/def Xform "(\w+)"/.exec(i)[1]),t.add(n),e(r[i],n))}}(a,e),e}}}}]);