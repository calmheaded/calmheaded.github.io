{"version":3,"file":"static/js/501.a63e45cf.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/3MFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tLoaderUtils,\n\tMatrix4,\n\tMesh,\n\tMeshPhongMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tRepeatWrapping,\n\tTextureLoader,\n\tsRGBEncoding\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.availableExtensions = [];\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tconst scope = this;\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet zip = null;\n\t\t\tlet file = null;\n\n\t\t\tlet relsName;\n\t\t\tlet modelRelsName;\n\t\t\tconst modelPartNames = [];\n\t\t\tconst texturesPartNames = [];\n\n\t\t\tlet modelRels;\n\t\t\tconst modelParts = {};\n\t\t\tconst printTicketParts = {};\n\t\t\tconst texturesParts = {};\n\n\t\t\ttry {\n\n\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( file in zip ) {\n\n\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\trelsName = file;\n\n\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\tmodelPartNames.push( file );\n\n\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst relsView = zip[ relsName ];\n\t\t\tconst relsFileText = LoaderUtils.decodeText( relsView );\n\t\t\tconst rels = parseRelsXml( relsFileText );\n\n\t\t\t//\n\n\t\t\tif ( modelRelsName ) {\n\n\t\t\t\tconst relsView = zip[ modelRelsName ];\n\t\t\t\tconst relsFileText = LoaderUtils.decodeText( relsView );\n\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\tconst modelPart = modelPartNames[ i ];\n\t\t\t\tconst view = zip[ modelPart ];\n\n\t\t\t\tconst fileText = LoaderUtils.decodeText( view );\n\t\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t}\n\n\t\t\t\tconst modelNode = xmlData.querySelector( 'model' );\n\t\t\t\tconst extensions = {};\n\n\t\t\t\tfor ( let i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\tconst attr = modelNode.attributes[ i ];\n\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst modelData = parseModelNode( modelNode );\n\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t}\n\n\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\tconst texturesPartName = texturesPartNames[ i ];\n\t\t\t\ttexturesParts[ texturesPartName ] = zip[ texturesPartName ].buffer;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trels: rels,\n\t\t\t\tmodelRels: modelRels,\n\t\t\t\tmodel: modelParts,\n\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\ttexture: texturesParts\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\tconst relationships = [];\n\n\t\t\tconst relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\tconst relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\tfor ( let i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\tconst relsNode = relsNodes[ i ];\n\n\t\t\t\tconst relationship = {\n\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t};\n\n\t\t\t\trelationships.push( relationship );\n\n\t\t\t}\n\n\t\t\treturn relationships;\n\n\t\t}\n\n\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\tconst metadataData = {};\n\n\t\t\tfor ( let i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\tconst metadataNode = metadataNodes[ i ];\n\t\t\t\tconst name = metadataNode.getAttribute( 'name' );\n\t\t\t\tconst validNames = [\n\t\t\t\t\t'Title',\n\t\t\t\t\t'Designer',\n\t\t\t\t\t'Description',\n\t\t\t\t\t'Copyright',\n\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t'Rating',\n\t\t\t\t\t'CreationDate',\n\t\t\t\t\t'ModificationDate'\n\t\t\t\t];\n\n\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn metadataData;\n\n\t\t}\n\n\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\tconst basematerialsData = {\n\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\tbasematerials: []\n\t\t\t};\n\n\t\t\tconst basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\tfor ( let i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialNode = basematerialNodes[ i ];\n\t\t\t\tconst basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t}\n\n\t\t\treturn basematerialsData;\n\n\t\t}\n\n\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\tconst texture2dData = {\n\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t};\n\n\t\t\treturn texture2dData;\n\n\t\t}\n\n\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\tconst texture2DGroupData = {\n\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\tconst uvs = [];\n\n\t\t\tfor ( let i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\tconst tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\tconst u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\tconst v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t}\n\n\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\treturn texture2DGroupData;\n\n\t\t}\n\n\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\tconst colorGroupData = {\n\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\tconst colors = [];\n\t\t\tconst colorObject = new Color();\n\n\t\t\tfor ( let i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\tconst colorNode = colorNodes[ i ];\n\t\t\t\tconst color = colorNode.getAttribute( 'color' );\n\n\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ) );\n\t\t\t\tcolorObject.convertSRGBToLinear(); // color is in sRGB\n\n\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t}\n\n\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\treturn colorGroupData;\n\n\t\t}\n\n\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\tconst metallicDisplaypropertiesData = {\n\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t};\n\n\t\t\tconst metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\tconst metallicData = [];\n\n\t\t\tfor ( let i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\tconst metallicNode = metallicNodes[ i ];\n\n\t\t\t\tmetallicData.push( {\n\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t}\n\n\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\tconst basematerialData = {};\n\n\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\treturn basematerialData;\n\n\t\t}\n\n\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\tconst meshData = {};\n\n\t\t\tconst vertices = [];\n\t\t\tconst vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\tfor ( let i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\tconst vertexNode = vertexNodes[ i ];\n\t\t\t\tconst x = vertexNode.getAttribute( 'x' );\n\t\t\t\tconst y = vertexNode.getAttribute( 'y' );\n\t\t\t\tconst z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t}\n\n\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\tconst triangleProperties = [];\n\t\t\tconst triangles = [];\n\t\t\tconst triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\tfor ( let i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\tconst triangleNode = triangleNodes[ i ];\n\t\t\t\tconst v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\tconst v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\tconst v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\tconst p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\tconst p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\tconst p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\tconst pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\tconst triangleProperty = {};\n\n\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t// optional\n\n\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\treturn meshData;\n\n\t\t}\n\n\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\tconst components = [];\n\n\t\t\tconst componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\tfor ( let i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\tconst componentNode = componentNodes[ i ];\n\t\t\t\tconst componentData = parseComponentNode( componentNode );\n\t\t\t\tcomponents.push( componentData );\n\n\t\t\t}\n\n\t\t\treturn components;\n\n\t\t}\n\n\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\tconst componentData = {};\n\n\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\tconst transform = componentNode.getAttribute( 'transform' );\n\n\t\t\tif ( transform ) {\n\n\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t}\n\n\t\t\treturn componentData;\n\n\t\t}\n\n\t\tfunction parseTransform( transform ) {\n\n\t\t\tconst t = [];\n\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t} );\n\n\t\t\tconst matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\treturn matrix;\n\n\t\t}\n\n\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\tconst objectData = {\n\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t};\n\n\t\t\tconst id = objectNode.getAttribute( 'id' );\n\n\t\t\tif ( id ) {\n\n\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t}\n\n\t\t\tconst pid = objectNode.getAttribute( 'pid' );\n\n\t\t\tif ( pid ) {\n\n\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t}\n\n\t\t\tconst pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\tif ( pindex ) {\n\n\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t}\n\n\t\t\tconst thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\tif ( thumbnail ) {\n\n\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t}\n\n\t\t\tconst partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\tif ( partnumber ) {\n\n\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t}\n\n\t\t\tconst name = objectNode.getAttribute( 'name' );\n\n\t\t\tif ( name ) {\n\n\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t}\n\n\t\t\tconst meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\tif ( meshNode ) {\n\n\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t}\n\n\t\t\tconst componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\tif ( componentsNode ) {\n\n\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t}\n\n\t\t\treturn objectData;\n\n\t\t}\n\n\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\tconst resourcesData = {};\n\n\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\tconst basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\tfor ( let i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\tconst basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\tconst textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\tfor ( let i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DNode = textures2DNodes[ i ];\n\t\t\t\tconst texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\tconst colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\tfor ( let i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\tconst colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\tconst pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\tfor ( let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\tconst pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\tconst pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\tconst textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\tfor ( let i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\tconst textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'object' ] = {};\n\t\t\tconst objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\tfor ( let i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\tconst objectNode = objectNodes[ i ];\n\t\t\t\tconst objectData = parseObjectNode( objectNode );\n\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t}\n\n\t\t\treturn resourcesData;\n\n\t\t}\n\n\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\tconst buildData = [];\n\t\t\tconst itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\tfor ( let i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\tconst itemNode = itemNodes[ i ];\n\t\t\t\tconst buildItem = {\n\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t};\n\t\t\t\tconst transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t}\n\n\t\t\treturn buildData;\n\n\t\t}\n\n\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\tconst modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\tconst metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\tif ( metadataNodes ) {\n\n\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t}\n\n\t\t\tconst resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\tif ( resourcesNode ) {\n\n\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t}\n\n\t\t\tconst buildNode = modelNode.querySelector( 'build' );\n\n\t\t\tif ( buildNode ) {\n\n\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t}\n\n\t\t\treturn modelData;\n\n\t\t}\n\n\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\tconst texid = texture2dgroup.texid;\n\t\t\tconst texture2ds = modelData.resources.texture2d;\n\t\t\tconst texture2d = texture2ds[ texid ];\n\n\t\t\tif ( texture2d ) {\n\n\t\t\t\tconst data = textureData[ texture2d.path ];\n\t\t\t\tconst type = texture2d.contenttype;\n\n\t\t\t\tconst blob = new Blob( [ data ], { type: type } );\n\t\t\t\tconst sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\tconst texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t} );\n\n\t\t\t\ttexture.encoding = sRGBEncoding;\n\n\t\t\t\t// texture parameters\n\n\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapS = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapT = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst objectPindex = objectData.pindex;\n\n\t\t\tconst materialMap = {};\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tconst pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst keys = Object.keys( materialMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialIndex = keys[ i ];\n\t\t\t\tconst trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\tconst basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\tconst material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t//\n\n\t\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\t\tconst positionData = [];\n\n\t\t\t\tconst vertices = meshData.vertices;\n\n\t\t\t\tfor ( let j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t//\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst uvData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst uvs = texture2dgroup.uvs;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t// material\n\n\t\t\tconst texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\tconst material = new MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst colorData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst colors = colorgroup.colors;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tconst v1 = triangleProperty.v1;\n\t\t\t\tconst v2 = triangleProperty.v2;\n\t\t\t\tconst v3 = triangleProperty.v3;\n\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tconst p1 = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectData.pindex;\n\t\t\t\tconst p2 = ( triangleProperty.p2 !== undefined ) ? triangleProperty.p2 : p1;\n\t\t\t\tconst p3 = ( triangleProperty.p3 !== undefined ) ? triangleProperty.p3 : p1;\n\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 2 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t// material\n\n\t\t\tconst material = new MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\tconst material = new MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst keys = Object.keys( resourceMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tconst resourceId = keys[ i ];\n\t\t\t\tconst triangleProperties = resourceMap[ resourceId ];\n\t\t\t\tconst resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tconst basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\tconst newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tconst texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tconst colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'default':\n\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tfor ( let i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tmeshes[ i ].name = objectData.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'texture';\n\n\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'material';\n\n\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'vertexColors';\n\n\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\treturn 'default';\n\n\t\t\t} else {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction analyzeObject( meshData, objectData ) {\n\n\t\t\tconst resourceMap = {};\n\n\t\t\tconst triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\tconst objectPid = objectData.pid;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tlet pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\treturn resourceMap;\n\n\t\t}\n\n\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst resourceMap = analyzeObject( meshData, objectData );\n\t\t\tconst meshes = buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData );\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\tif ( ! extensions ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst availableExtensions = [];\n\t\t\tconst keys = Object.keys( extensions );\n\n\t\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\tconst ns = keys[ i ];\n\n\t\t\t\tfor ( let j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\tconst extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\tconst extension = availableExtensions[ i ];\n\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\tlet material;\n\n\t\t\tconst displaypropertiesid = materialData.displaypropertiesid;\n\t\t\tconst pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\tconst pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\tconst metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\tmaterial = new MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t}\n\n\t\t\tmaterial.name = materialData.name;\n\n\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\tconst displaycolor = materialData.displaycolor;\n\n\t\t\tconst color = displaycolor.substring( 0, 7 );\n\t\t\tmaterial.color.setStyle( color );\n\t\t\tmaterial.color.convertSRGBToLinear(); // displaycolor is in sRGB\n\n\t\t\t// process alpha if set\n\n\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\tconst composite = new Group();\n\n\t\t\tfor ( let j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\tconst component = compositeData[ j ];\n\t\t\t\tlet build = objects[ component.objectId ];\n\n\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t}\n\n\t\t\t\tconst object3D = build.clone();\n\n\t\t\t\t// apply component transform\n\n\t\t\t\tconst transform = component.transform;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tcomposite.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn composite;\n\n\t\t}\n\n\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\tconst objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\tconst meshData = objectData[ 'mesh' ];\n\n\t\t\t\tconst extensions = modelData[ 'extensions' ];\n\t\t\t\tconst modelXml = modelData[ 'xml' ];\n\n\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t} else {\n\n\t\t\t\tconst compositeData = objectData[ 'components' ];\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tobjects[ objectData.id ].name = objectData.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildObjects( data3mf ) {\n\n\t\t\tconst modelsData = data3mf.model;\n\t\t\tconst modelRels = data3mf.modelRels;\n\t\t\tconst objects = {};\n\t\t\tconst modelsKeys = Object.keys( modelsData );\n\t\t\tconst textureData = {};\n\n\t\t\t// evaluate model relationships to textures\n\n\t\t\tif ( modelRels ) {\n\n\t\t\t\tfor ( let i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst modelRel = modelRels[ i ];\n\t\t\t\t\tconst textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// start build\n\n\t\t\tfor ( let i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\tconst modelsKey = modelsKeys[ i ];\n\t\t\t\tconst modelData = modelsData[ modelsKey ];\n\n\t\t\t\tconst objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\tfor ( let j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\tconst objectId = objectIds[ j ];\n\n\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction fetch3DModelPart( rels ) {\n\n\t\t\tfor ( let i = 0; i < rels.length; i ++ ) {\n\n\t\t\t\tconst rel = rels[ i ];\n\t\t\t\tconst extension = rel.target.split( '.' ).pop();\n\n\t\t\t\tif ( extension.toLowerCase() === 'model' ) return rel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction build( objects, data3mf ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst relationship = fetch3DModelPart( data3mf[ 'rels' ] );\n\t\t\tconst buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\tfor ( let i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\tconst buildItem = buildData[ i ];\n\t\t\t\tconst object3D = objects[ buildItem[ 'objectId' ] ].clone();\n\n\t\t\t\t// apply transform\n\n\t\t\t\tconst transform = buildItem[ 'transform' ];\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tgroup.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tconst data3mf = loadDocument( data );\n\t\tconst objects = buildObjects( data3mf );\n\n\t\treturn build( objects, data3mf );\n\n\t}\n\n\taddExtension( extension ) {\n\n\t\tthis.availableExtensions.push( extension );\n\n\t}\n\n}\n\nexport { ThreeMFLoader };\n"],"names":["ThreeMFLoader","constructor","manager","super","this","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","relsName","modelRelsName","zip","file","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sourceRoot":""}