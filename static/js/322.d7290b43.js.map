{"version":3,"file":"static/js/322.d7290b43.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/MTLLoader.js"],"sourcesContent":["import {\n\tColor,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tsRGBEncoding\n} from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.encoding = sRGBEncoding;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n"],"names":["MTLLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","path","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","undefined","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","encoding","n","color","fromArray","convertSRGBToLinear","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"sourceRoot":""}