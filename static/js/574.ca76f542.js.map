{"version":3,"file":"static/js/574.ca76f542.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/AMFLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLoader,\n\tLoaderUtils,\n\tMesh,\n\tMeshPhongMaterial\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet view = new DataView( data );\n\t\t\tconst magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\n\n\t\t\tif ( magic === 'PK' ) {\n\n\t\t\t\tlet zip = null;\n\t\t\t\tlet file = null;\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( file in zip ) {\n\n\t\t\t\t\tif ( file.toLowerCase().slice( - 4 ) === '.amf' ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\n\t\t\t\tview = new DataView( zip[ file ].buffer );\n\n\t\t\t}\n\n\t\t\tconst fileText = LoaderUtils.decodeText( view );\n\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn xmlData;\n\n\t\t}\n\n\t\tfunction loadDocumentScale( node ) {\n\n\t\t\tlet scale = 1.0;\n\t\t\tlet unit = 'millimeter';\n\n\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\n\n\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\n\n\t\t\t}\n\n\t\t\tconst scaleUnits = {\n\t\t\t\tmillimeter: 1.0,\n\t\t\t\tinch: 25.4,\n\t\t\t\tfeet: 304.8,\n\t\t\t\tmeter: 1000.0,\n\t\t\t\tmicron: 0.001\n\t\t\t};\n\n\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\n\n\t\t\t\tscale = scaleUnits[ unit ];\n\n\t\t\t}\n\n\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\n\t\t\treturn scale;\n\n\t\t}\n\n\t\tfunction loadMaterials( node ) {\n\n\t\t\tlet matName = 'AMF Material';\n\t\t\tconst matId = node.attributes.id.textContent;\n\t\t\tlet color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tlet loadedMaterial = null;\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matChildEl = node.childNodes[ i ];\n\n\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tmatName = matChildEl.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\n\n\t\t\t\t\tcolor = loadColor( matChildEl );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tloadedMaterial = new MeshPhongMaterial( {\n\t\t\t\tflatShading: true,\n\t\t\t\tcolor: new Color( color.r, color.g, color.b ),\n\t\t\t\tname: matName\n\t\t\t} );\n\n\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\tloadedMaterial.transparent = true;\n\t\t\t\tloadedMaterial.opacity = color.a;\n\n\t\t\t}\n\n\t\t\treturn { id: matId, material: loadedMaterial };\n\n\t\t}\n\n\t\tfunction loadColor( node ) {\n\n\t\t\tconst color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matColor = node.childNodes[ i ];\n\n\t\t\t\tif ( matColor.nodeName === 'r' ) {\n\n\t\t\t\t\tcolor.r = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\n\n\t\t\t\t\tcolor.g = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\n\n\t\t\t\t\tcolor.b = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\n\n\t\t\t\t\tcolor.a = matColor.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tfunction loadMeshVolume( node ) {\n\n\t\t\tconst volume = { name: '', triangles: [], materialid: null };\n\n\t\t\tlet currVolumeNode = node.firstElementChild;\n\n\t\t\tif ( node.attributes.materialid !== undefined ) {\n\n\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\n\n\t\t\t}\n\n\t\t\twhile ( currVolumeNode ) {\n\n\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\n\n\t\t\t\t\tconst v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\n\t\t\t\t\tconst v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\n\t\t\t\t\tconst v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\n\n\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn volume;\n\n\t\t}\n\n\t\tfunction loadMeshVertices( node ) {\n\n\t\t\tconst vertArray = [];\n\t\t\tconst normalArray = [];\n\t\t\tlet currVerticesNode = node.firstElementChild;\n\n\t\t\twhile ( currVerticesNode ) {\n\n\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\n\n\t\t\t\t\tlet vNode = currVerticesNode.firstElementChild;\n\n\t\t\t\t\twhile ( vNode ) {\n\n\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\n\n\t\t\t\t\t\t\tconst x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tvertArray.push( x, y, z );\n\n\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\n\n\t\t\t\t\t\t\tconst nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvNode = vNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\n\n\t\t}\n\n\t\tfunction loadObject( node ) {\n\n\t\t\tconst objId = node.attributes.id.textContent;\n\t\t\tconst loadedObject = { name: 'amfobject', meshes: [] };\n\t\t\tlet currColor = null;\n\t\t\tlet currObjNode = node.firstElementChild;\n\n\t\t\twhile ( currObjNode ) {\n\n\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\n\n\t\t\t\t\tcurrColor = loadColor( currObjNode );\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\n\n\t\t\t\t\tlet currMeshNode = currObjNode.firstElementChild;\n\t\t\t\t\tconst mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n\n\t\t\t\t\twhile ( currMeshNode ) {\n\n\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\n\n\t\t\t\t\t\t\tconst loadedVertices = loadMeshVertices( currMeshNode );\n\n\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\n\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\n\n\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\n\n\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tloadedObject.meshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'id': objId, 'obj': loadedObject };\n\n\t\t}\n\n\t\tconst xmlData = loadDocument( data );\n\t\tlet amfName = '';\n\t\tlet amfAuthor = '';\n\t\tconst amfScale = loadDocumentScale( xmlData );\n\t\tconst amfMaterials = {};\n\t\tconst amfObjects = {};\n\t\tconst childNodes = xmlData.documentElement.childNodes;\n\n\t\tlet i, j;\n\n\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\tconst child = childNodes[ i ];\n\n\t\t\tif ( child.nodeName === 'metadata' ) {\n\n\t\t\t\tif ( child.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tamfName = child.textContent;\n\n\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\n\n\t\t\t\t\t\tamfAuthor = child.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( child.nodeName === 'material' ) {\n\n\t\t\t\tconst loadedMaterial = loadMaterials( child );\n\n\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\n\n\t\t\t} else if ( child.nodeName === 'object' ) {\n\n\t\t\t\tconst loadedObject = loadObject( child );\n\n\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst sceneObject = new Group();\n\t\tconst defaultMaterial = new MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\n\n\t\tsceneObject.name = amfName;\n\t\tsceneObject.userData.author = amfAuthor;\n\t\tsceneObject.userData.loader = 'AMF';\n\n\t\tfor ( const id in amfObjects ) {\n\n\t\t\tconst part = amfObjects[ id ];\n\t\t\tconst meshes = part.meshes;\n\t\t\tconst newObject = new Group();\n\t\t\tnewObject.name = part.name || '';\n\n\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\tlet objDefaultMaterial = defaultMaterial;\n\t\t\t\tconst mesh = meshes[ i ];\n\t\t\t\tconst vertices = new Float32BufferAttribute( mesh.vertices, 3 );\n\t\t\t\tlet normals = null;\n\n\t\t\t\tif ( mesh.normals.length ) {\n\n\t\t\t\t\tnormals = new Float32BufferAttribute( mesh.normals, 3 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( mesh.color ) {\n\n\t\t\t\t\tconst color = mesh.color;\n\n\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\n\t\t\t\t\tobjDefaultMaterial.color = new Color( color.r, color.g, color.b );\n\n\t\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\n\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst volumes = mesh.volumes;\n\n\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\n\n\t\t\t\t\tconst volume = volumes[ j ];\n\t\t\t\t\tconst newGeometry = new BufferGeometry();\n\t\t\t\t\tlet material = objDefaultMaterial;\n\n\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\n\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\n\n\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\n\n\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\n\t\t\t\t\tnewObject.add( new Mesh( newGeometry, material.clone() ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsceneObject.add( newObject );\n\n\t\t}\n\n\t\treturn sceneObject;\n\n\t}\n\n}\n\nexport { AMFLoader };\n"],"names":["AMFLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","slice","buffer","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","undefined","attributes","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","vertices","normals","volumes","loadedVertices","concat","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","obj","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sourceRoot":""}