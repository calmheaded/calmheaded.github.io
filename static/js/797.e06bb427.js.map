{"version":3,"file":"static/js/797.e06bb427.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/PCDLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tInt32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tPoints,\n\tPointsMaterial\n} from 'three';\n\nclass PCDLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.littleEndian = true;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( data ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\t// from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n\n\t\tfunction decompressLZF( inData, outLength ) {\n\n\t\t\tconst inLength = inData.length;\n\t\t\tconst outData = new Uint8Array( outLength );\n\t\t\tlet inPtr = 0;\n\t\t\tlet outPtr = 0;\n\t\t\tlet ctrl;\n\t\t\tlet len;\n\t\t\tlet ref;\n\t\t\tdo {\n\n\t\t\t\tctrl = inData[ inPtr ++ ];\n\t\t\t\tif ( ctrl < ( 1 << 5 ) ) {\n\n\t\t\t\t\tctrl ++;\n\t\t\t\t\tif ( outPtr + ctrl > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\tif ( inPtr + ctrl > inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\toutData[ outPtr ++ ] = inData[ inPtr ++ ];\n\n\t\t\t\t\t} while ( -- ctrl );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlen = ctrl >> 5;\n\t\t\t\t\tref = outPtr - ( ( ctrl & 0x1f ) << 8 ) - 1;\n\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tif ( len === 7 ) {\n\n\t\t\t\t\t\tlen += inData[ inPtr ++ ];\n\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tref -= inData[ inPtr ++ ];\n\t\t\t\t\tif ( outPtr + len + 2 > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\tif ( ref < 0 ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tif ( ref >= outPtr ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\toutData[ outPtr ++ ] = outData[ ref ++ ];\n\n\t\t\t\t\t} while ( -- len + 2 );\n\n\t\t\t\t}\n\n\t\t\t} while ( inPtr < inLength );\n\n\t\t\treturn outData;\n\n\t\t}\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tconst PCDheader = {};\n\t\t\tconst result1 = data.search( /[\\r\\n]DATA\\s(\\S*)\\s/i );\n\t\t\tconst result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec( data.slice( result1 - 1 ) );\n\n\t\t\tPCDheader.data = result2[ 1 ];\n\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\n\t\t\tPCDheader.str = data.slice( 0, PCDheader.headerLen );\n\n\t\t\t// remove comments\n\n\t\t\tPCDheader.str = PCDheader.str.replace( /#.*/gi, '' );\n\n\t\t\t// parse\n\n\t\t\tPCDheader.version = /VERSION (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.fields = /FIELDS (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.size = /SIZE (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.type = /TYPE (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.count = /COUNT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.width = /WIDTH (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.height = /HEIGHT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.viewpoint = /VIEWPOINT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.points = /POINTS (.*)/i.exec( PCDheader.str );\n\n\t\t\t// evaluate\n\n\t\t\tif ( PCDheader.version !== null )\n\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\n\n\t\t\tPCDheader.fields = ( PCDheader.fields !== null ) ? PCDheader.fields[ 1 ].split( ' ' ) : [];\n\n\t\t\tif ( PCDheader.type !== null )\n\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\n\n\t\t\tif ( PCDheader.width !== null )\n\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\n\n\t\t\tif ( PCDheader.height !== null )\n\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\n\n\t\t\tif ( PCDheader.viewpoint !== null )\n\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\n\n\t\t\tif ( PCDheader.points !== null )\n\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\n\n\t\t\tif ( PCDheader.points === null )\n\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\n\n\t\t\tif ( PCDheader.size !== null ) {\n\n\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( PCDheader.count !== null ) {\n\n\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\tPCDheader.count = [];\n\n\t\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\t\tPCDheader.count.push( 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tPCDheader.offset = {};\n\n\t\t\tlet sizeSum = 0;\n\n\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\n\t\t\t\t\tsizeSum += PCDheader.size[ i ] * PCDheader.count[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// for binary only\n\n\t\t\tPCDheader.rowSize = sizeSum;\n\n\t\t\treturn PCDheader;\n\n\t\t}\n\n\t\tconst textData = LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t// parse header (always ascii format)\n\n\t\tconst PCDheader = parseHeader( textData );\n\n\t\t// parse data\n\n\t\tconst position = [];\n\t\tconst normal = [];\n\t\tconst color = [];\n\t\tconst intensity = [];\n\t\tconst label = [];\n\n\t\t// ascii\n\n\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\tconst offset = PCDheader.offset;\n\t\t\tconst pcdData = textData.slice( PCDheader.headerLen );\n\t\t\tconst lines = pcdData.split( '\\n' );\n\n\t\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tif ( lines[ i ] === '' ) continue;\n\n\t\t\t\tconst line = lines[ i ].split( ' ' );\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\n\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\n\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tconst rgb_field_index = PCDheader.fields.findIndex( ( field ) => field === 'rgb' );\n\t\t\t\t\tconst rgb_type = PCDheader.type[ rgb_field_index ];\n\n\t\t\t\t\tconst float = parseFloat( line[ offset.rgb ] );\n\t\t\t\t\tlet rgb = float;\n\n\t\t\t\t\tif ( rgb_type === 'F' ) {\n\n\t\t\t\t\t\t// treat float values as int\n\t\t\t\t\t\t// https://github.com/daavoo/pyntcloud/pull/204/commits/7b4205e64d5ed09abe708b2e91b615690c24d518\n\t\t\t\t\t\tconst farr = new Float32Array( 1 );\n\t\t\t\t\t\tfarr[ 0 ] = float;\n\t\t\t\t\t\trgb = new Int32Array( farr.buffer )[ 0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst r = ( rgb >> 16 ) & 0x0000ff;\n\t\t\t\t\tconst g = ( rgb >> 8 ) & 0x0000ff;\n\t\t\t\t\tconst b = ( rgb >> 0 ) & 0x0000ff;\n\t\t\t\t\tcolor.push( r / 255, g / 255, b / 255 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.intensity !== undefined ) {\n\n\t\t\t\t\tintensity.push( parseFloat( line[ offset.intensity ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.label !== undefined ) {\n\n\t\t\t\t\tlabel.push( parseInt( line[ offset.label ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// binary-compressed\n\n\t\t// normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n\t\t// binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n\t\t// that requires a totally different parsing approach compared to non-compressed data\n\n\t\tif ( PCDheader.data === 'binary_compressed' ) {\n\n\t\t\tconst sizes = new Uint32Array( data.slice( PCDheader.headerLen, PCDheader.headerLen + 8 ) );\n\t\t\tconst compressedSize = sizes[ 0 ];\n\t\t\tconst decompressedSize = sizes[ 1 ];\n\t\t\tconst decompressed = decompressLZF( new Uint8Array( data, PCDheader.headerLen + 8, compressedSize ), decompressedSize );\n\t\t\tconst dataview = new DataView( decompressed.buffer );\n\n\t\t\tconst offset = PCDheader.offset;\n\n\t\t\tfor ( let i = 0; i < PCDheader.points; i ++ ) {\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'x' );\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'y' );\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'z' );\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tconst rgbIndex = PCDheader.fields.indexOf( 'rgb' );\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 2 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 1 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 0 ) / 255.0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'normal_x' );\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'normal_y' );\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'normal_z' );\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.intensity !== undefined ) {\n\n\t\t\t\t\tconst intensityIndex = PCDheader.fields.indexOf( 'intensity' );\n\t\t\t\t\tintensity.push( dataview.getFloat32( ( PCDheader.points * offset.intensity ) + PCDheader.size[ intensityIndex ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.label !== undefined ) {\n\n\t\t\t\t\tconst labelIndex = PCDheader.fields.indexOf( 'label' );\n\t\t\t\t\tlabel.push( dataview.getInt32( ( PCDheader.points * offset.label ) + PCDheader.size[ labelIndex ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// binary\n\n\t\tif ( PCDheader.data === 'binary' ) {\n\n\t\t\tconst dataview = new DataView( data, PCDheader.headerLen );\n\t\t\tconst offset = PCDheader.offset;\n\n\t\t\tfor ( let i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 2 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 1 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 0 ) / 255.0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.intensity !== undefined ) {\n\n\t\t\t\t\tintensity.push( dataview.getFloat32( row + offset.intensity, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.label !== undefined ) {\n\n\t\t\t\t\tlabel.push( dataview.getInt32( row + offset.label, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( position.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\t\tif ( normal.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal, 3 ) );\n\t\tif ( color.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color, 3 ) );\n\t\tif ( intensity.length > 0 ) geometry.setAttribute( 'intensity', new Float32BufferAttribute( intensity, 1 ) );\n\t\tif ( label.length > 0 ) geometry.setAttribute( 'label', new Int32BufferAttribute( label, 1 ) );\n\n\t\tgeometry.computeBoundingSphere();\n\n\t\t// build material\n\n\t\tconst material = new PointsMaterial( { size: 0.005 } );\n\n\t\tif ( color.length > 0 ) {\n\n\t\t\tmaterial.vertexColors = true;\n\n\t\t}\n\n\t\t// build point cloud\n\n\t\treturn new Points( geometry, material );\n\n\t}\n\n}\n\nexport { PCDLoader };\n"],"names":["PCDLoader","constructor","manager","super","this","littleEndian","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","decompressLZF","inData","outLength","inLength","length","outData","Uint8Array","ctrl","len","ref","inPtr","outPtr","Error","parseHeader","PCDheader","result1","search","result2","exec","slice","headerLen","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","textData","position","normal","color","intensity","label","pcdData","lines","line","undefined","y","z","rgb","rgb_field_index","findIndex","field","rgb_type","float","farr","Float32Array","Int32Array","buffer","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","compressedSize","decompressedSize","decompressed","dataview","DataView","xIndex","indexOf","yIndex","zIndex","getFloat32","rgbIndex","getUint8","intensityIndex","labelIndex","getInt32","row","geometry","setAttribute","computeBoundingSphere","material","vertexColors"],"sourceRoot":""}