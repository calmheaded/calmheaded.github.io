{"version":3,"file":"static/js/190.b24886dc.js","mappings":"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","sources":["webpack://three-model-viewer/./node_modules/_three@0.148.0@three/examples/jsm/loaders/SVGLoader.js"],"sourcesContent":["import {\n\tBox2,\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tMatrix3,\n\tPath,\n\tShape,\n\tShapePath,\n\tShapeUtils,\n\tVector2,\n\tVector3\n} from 'three';\n\nclass SVGLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// Default dots per inch\n\t\tthis.defaultDPI = 90;\n\n\t\t// Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\t\tthis.defaultUnit = 'px';\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst scope = this;\n\n\t\tfunction parseNode( node, style ) {\n\n\t\t\tif ( node.nodeType !== 1 ) return;\n\n\t\t\tconst transform = getNodeTransform( node );\n\n\t\t\tlet isDefsNode = false;\n\n\t\t\tlet path = null;\n\n\t\t\tswitch ( node.nodeName ) {\n\n\t\t\t\tcase 'svg':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'style':\n\t\t\t\t\tparseCSSStylesheet( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'g':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'path':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tif ( node.hasAttribute( 'd' ) ) path = parsePathNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rect':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseRectNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'polygon':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parsePolygonNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'polyline':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parsePolylineNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'circle':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseCircleNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ellipse':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseEllipseNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'line':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseLineNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'defs':\n\t\t\t\t\tisDefsNode = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'use':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\n\t\t\t\t\tconst href = node.getAttributeNS( 'http://www.w3.org/1999/xlink', 'href' ) || '';\n\t\t\t\t\tconst usedNodeId = href.substring( 1 );\n\t\t\t\t\tconst usedNode = node.viewportElement.getElementById( usedNodeId );\n\t\t\t\t\tif ( usedNode ) {\n\n\t\t\t\t\t\tparseNode( usedNode, style );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'SVGLoader: \\'use node\\' references non-existent node id: ' + usedNodeId );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// console.log( node );\n\n\t\t\t}\n\n\t\t\tif ( path ) {\n\n\t\t\t\tif ( style.fill !== undefined && style.fill !== 'none' ) {\n\n\t\t\t\t\tpath.color.setStyle( style.fill );\n\n\t\t\t\t}\n\n\t\t\t\ttransformPath( path, currentTransform );\n\n\t\t\t\tpaths.push( path );\n\n\t\t\t\tpath.userData = { node: node, style: style };\n\n\t\t\t}\n\n\t\t\tconst childNodes = node.childNodes;\n\n\t\t\tfor ( let i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\t\tconst node = childNodes[ i ];\n\n\t\t\t\tif ( isDefsNode && node.nodeName !== 'style' && node.nodeName !== 'defs' ) {\n\n\t\t\t\t\t// Ignore everything in defs except CSS style definitions\n\t\t\t\t\t// and nested defs, because it is OK by the standard to have\n\t\t\t\t\t// <style/> there.\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tparseNode( node, style );\n\n\t\t\t}\n\n\n\t\t\tif ( transform ) {\n\n\t\t\t\ttransformStack.pop();\n\n\t\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\t\tcurrentTransform.copy( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parsePathNode( node ) {\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tconst point = new Vector2();\n\t\t\tconst control = new Vector2();\n\n\t\t\tconst firstPoint = new Vector2();\n\t\t\tlet isFirstPoint = true;\n\t\t\tlet doSetFirstPoint = false;\n\n\t\t\tconst d = node.getAttribute( 'd' );\n\n\t\t\t// console.log( d );\n\n\t\t\tconst commands = d.match( /[a-df-z][^a-df-z]*/ig );\n\n\t\t\tfor ( let i = 0, l = commands.length; i < l; i ++ ) {\n\n\t\t\t\tconst command = commands[ i ];\n\n\t\t\t\tconst type = command.charAt( 0 );\n\t\t\t\tconst data = command.slice( 1 ).trim();\n\n\t\t\t\tif ( isFirstPoint === true ) {\n\n\t\t\t\t\tdoSetFirstPoint = true;\n\t\t\t\t\tisFirstPoint = false;\n\n\t\t\t\t}\n\n\t\t\t\tlet numbers;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'M':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( j === 0 ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.y = numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'C':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 4 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 5 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 3 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 4 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 5 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'S':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tconst rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\tconst ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'A':\n\t\t\t\t\t\tnumbers = parseFloats( data, [ 3, 4 ], 7 );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t// skip command if start point == end point\n\t\t\t\t\t\t\tif ( numbers[ j + 5 ] == point.x && numbers[ j + 6 ] == point.y ) continue;\n\n\t\t\t\t\t\t\tconst start = point.clone();\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 5 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 6 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( j === 0 ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'h':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.y += numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 4 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 5 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 2 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 3 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 4 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 5 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 's':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tconst rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\tconst ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\tpoint.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = point.y + numbers[ j + 1 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tnumbers = parseFloats( data, [ 3, 4 ], 7 );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t// skip command if no displacement\n\t\t\t\t\t\t\tif ( numbers[ j + 5 ] == 0 && numbers[ j + 6 ] == 0 ) continue;\n\n\t\t\t\t\t\t\tconst start = point.clone();\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 5 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 6 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\tcase 'z':\n\t\t\t\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\t\t\t\tif ( path.currentPath.curves.length > 0 ) {\n\n\t\t\t\t\t\t\t// Reset point to beginning of Path\n\t\t\t\t\t\t\tpoint.copy( firstPoint );\n\t\t\t\t\t\t\tpath.currentPath.currentPoint.copy( point );\n\t\t\t\t\t\t\tisFirstPoint = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( command );\n\n\t\t\t\t}\n\n\t\t\t\t// console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\t\t\t\tdoSetFirstPoint = false;\n\n\t\t\t}\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseCSSStylesheet( node ) {\n\n\t\t\tif ( ! node.sheet || ! node.sheet.cssRules || ! node.sheet.cssRules.length ) return;\n\n\t\t\tfor ( let i = 0; i < node.sheet.cssRules.length; i ++ ) {\n\n\t\t\t\tconst stylesheet = node.sheet.cssRules[ i ];\n\n\t\t\t\tif ( stylesheet.type !== 1 ) continue;\n\n\t\t\t\tconst selectorList = stylesheet.selectorText\n\t\t\t\t\t.split( /,/gm )\n\t\t\t\t\t.filter( Boolean )\n\t\t\t\t\t.map( i => i.trim() );\n\n\t\t\t\tfor ( let j = 0; j < selectorList.length; j ++ ) {\n\n\t\t\t\t\t// Remove empty rules\n\t\t\t\t\tconst definitions = Object.fromEntries(\n\t\t\t\t\t\tObject.entries( stylesheet.style ).filter( ( [ , v ] ) => v !== '' )\n\t\t\t\t\t);\n\n\t\t\t\t\tstylesheets[ selectorList[ j ] ] = Object.assign(\n\t\t\t\t\t\tstylesheets[ selectorList[ j ] ] || {},\n\t\t\t\t\t\tdefinitions\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n\t\t * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n\t\t * From\n\t\t * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n\t\t * To\n\t\t * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n\t\t */\n\n\t\tfunction parseArcCommand( path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end ) {\n\n\t\t\tif ( rx == 0 || ry == 0 ) {\n\n\t\t\t\t// draw a line if either of the radii == 0\n\t\t\t\tpath.lineTo( end.x, end.y );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tx_axis_rotation = x_axis_rotation * Math.PI / 180;\n\n\t\t\t// Ensure radii are positive\n\t\t\trx = Math.abs( rx );\n\t\t\try = Math.abs( ry );\n\n\t\t\t// Compute (x1', y1')\n\t\t\tconst dx2 = ( start.x - end.x ) / 2.0;\n\t\t\tconst dy2 = ( start.y - end.y ) / 2.0;\n\t\t\tconst x1p = Math.cos( x_axis_rotation ) * dx2 + Math.sin( x_axis_rotation ) * dy2;\n\t\t\tconst y1p = - Math.sin( x_axis_rotation ) * dx2 + Math.cos( x_axis_rotation ) * dy2;\n\n\t\t\t// Compute (cx', cy')\n\t\t\tlet rxs = rx * rx;\n\t\t\tlet rys = ry * ry;\n\t\t\tconst x1ps = x1p * x1p;\n\t\t\tconst y1ps = y1p * y1p;\n\n\t\t\t// Ensure radii are large enough\n\t\t\tconst cr = x1ps / rxs + y1ps / rys;\n\n\t\t\tif ( cr > 1 ) {\n\n\t\t\t\t// scale up rx,ry equally so cr == 1\n\t\t\t\tconst s = Math.sqrt( cr );\n\t\t\t\trx = s * rx;\n\t\t\t\try = s * ry;\n\t\t\t\trxs = rx * rx;\n\t\t\t\trys = ry * ry;\n\n\t\t\t}\n\n\t\t\tconst dq = ( rxs * y1ps + rys * x1ps );\n\t\t\tconst pq = ( rxs * rys - dq ) / dq;\n\t\t\tlet q = Math.sqrt( Math.max( 0, pq ) );\n\t\t\tif ( large_arc_flag === sweep_flag ) q = - q;\n\t\t\tconst cxp = q * rx * y1p / ry;\n\t\t\tconst cyp = - q * ry * x1p / rx;\n\n\t\t\t// Step 3: Compute (cx, cy) from (cx', cy')\n\t\t\tconst cx = Math.cos( x_axis_rotation ) * cxp - Math.sin( x_axis_rotation ) * cyp + ( start.x + end.x ) / 2;\n\t\t\tconst cy = Math.sin( x_axis_rotation ) * cxp + Math.cos( x_axis_rotation ) * cyp + ( start.y + end.y ) / 2;\n\n\t\t\t// Step 4: Compute θ1 and Δθ\n\t\t\tconst theta = svgAngle( 1, 0, ( x1p - cxp ) / rx, ( y1p - cyp ) / ry );\n\t\t\tconst delta = svgAngle( ( x1p - cxp ) / rx, ( y1p - cyp ) / ry, ( - x1p - cxp ) / rx, ( - y1p - cyp ) / ry ) % ( Math.PI * 2 );\n\n\t\t\tpath.currentPath.absellipse( cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation );\n\n\t\t}\n\n\t\tfunction svgAngle( ux, uy, vx, vy ) {\n\n\t\t\tconst dot = ux * vx + uy * vy;\n\t\t\tconst len = Math.sqrt( ux * ux + uy * uy ) * Math.sqrt( vx * vx + vy * vy );\n\t\t\tlet ang = Math.acos( Math.max( - 1, Math.min( 1, dot / len ) ) ); // floating point precision, slightly over values appear\n\t\t\tif ( ( ux * vy - uy * vx ) < 0 ) ang = - ang;\n\t\t\treturn ang;\n\n\t\t}\n\n\t\t/*\n\t\t* According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n\t\t* rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n\t\t*/\n\t\tfunction parseRectNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'x' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'y' ) || 0 );\n\t\t\tconst rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || node.getAttribute( 'ry' ) || 0 );\n\t\t\tconst ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || node.getAttribute( 'rx' ) || 0 );\n\t\t\tconst w = parseFloatWithUnits( node.getAttribute( 'width' ) );\n\t\t\tconst h = parseFloatWithUnits( node.getAttribute( 'height' ) );\n\n\t\t\t// Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n\t\t\t// https://spencermortensen.com/articles/bezier-circle/\n\t\t\tconst bci = 1 - 0.551915024494;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\t// top left\n\t\t\tpath.moveTo( x + rx, y );\n\n\t\t\t// top right\n\t\t\tpath.lineTo( x + w - rx, y );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + w - rx * bci,\n\t\t\t\t\ty,\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + ry * bci,\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + ry\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// bottom right\n\t\t\tpath.lineTo( x + w, y + h - ry );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + h - ry * bci,\n\t\t\t\t\tx + w - rx * bci,\n\t\t\t\t\ty + h,\n\t\t\t\t\tx + w - rx,\n\t\t\t\t\ty + h\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// bottom left\n\t\t\tpath.lineTo( x + rx, y + h );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + rx * bci,\n\t\t\t\t\ty + h,\n\t\t\t\t\tx,\n\t\t\t\t\ty + h - ry * bci,\n\t\t\t\t\tx,\n\t\t\t\t\ty + h - ry\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// back to top left\n\t\t\tpath.lineTo( x, y + ry );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo( x, y + ry * bci, x + rx * bci, y, x + rx, y );\n\n\t\t\t}\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parsePolygonNode( node ) {\n\n\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\tconst x = parseFloatWithUnits( a );\n\t\t\t\tconst y = parseFloatWithUnits( b );\n\n\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t}\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tconst regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tlet index = 0;\n\n\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parsePolylineNode( node ) {\n\n\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\tconst x = parseFloatWithUnits( a );\n\t\t\t\tconst y = parseFloatWithUnits( b );\n\n\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t}\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tconst regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tlet index = 0;\n\n\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseCircleNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );\n\t\t\tconst r = parseFloatWithUnits( node.getAttribute( 'r' ) || 0 );\n\n\t\t\tconst subpath = new Path();\n\t\t\tsubpath.absarc( x, y, r, 0, Math.PI * 2 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.subPaths.push( subpath );\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseEllipseNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );\n\t\t\tconst rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || 0 );\n\t\t\tconst ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || 0 );\n\n\t\t\tconst subpath = new Path();\n\t\t\tsubpath.absellipse( x, y, rx, ry, 0, Math.PI * 2 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.subPaths.push( subpath );\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseLineNode( node ) {\n\n\t\t\tconst x1 = parseFloatWithUnits( node.getAttribute( 'x1' ) || 0 );\n\t\t\tconst y1 = parseFloatWithUnits( node.getAttribute( 'y1' ) || 0 );\n\t\t\tconst x2 = parseFloatWithUnits( node.getAttribute( 'x2' ) || 0 );\n\t\t\tconst y2 = parseFloatWithUnits( node.getAttribute( 'y2' ) || 0 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.moveTo( x1, y1 );\n\t\t\tpath.lineTo( x2, y2 );\n\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction parseStyle( node, style ) {\n\n\t\t\tstyle = Object.assign( {}, style ); // clone style\n\n\t\t\tlet stylesheetStyles = {};\n\n\t\t\tif ( node.hasAttribute( 'class' ) ) {\n\n\t\t\t\tconst classSelectors = node.getAttribute( 'class' )\n\t\t\t\t\t.split( /\\s/ )\n\t\t\t\t\t.filter( Boolean )\n\t\t\t\t\t.map( i => i.trim() );\n\n\t\t\t\tfor ( let i = 0; i < classSelectors.length; i ++ ) {\n\n\t\t\t\t\tstylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '.' + classSelectors[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( node.hasAttribute( 'id' ) ) {\n\n\t\t\t\tstylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '#' + node.getAttribute( 'id' ) ] );\n\n\t\t\t}\n\n\t\t\tfunction addStyle( svgName, jsName, adjustFunction ) {\n\n\t\t\t\tif ( adjustFunction === undefined ) adjustFunction = function copy( v ) {\n\n\t\t\t\t\tif ( v.startsWith( 'url' ) ) console.warn( 'SVGLoader: url access in attributes is not implemented.' );\n\n\t\t\t\t\treturn v;\n\n\t\t\t\t};\n\n\t\t\t\tif ( node.hasAttribute( svgName ) ) style[ jsName ] = adjustFunction( node.getAttribute( svgName ) );\n\t\t\t\tif ( stylesheetStyles[ svgName ] ) style[ jsName ] = adjustFunction( stylesheetStyles[ svgName ] );\n\t\t\t\tif ( node.style && node.style[ svgName ] !== '' ) style[ jsName ] = adjustFunction( node.style[ svgName ] );\n\n\t\t\t}\n\n\t\t\tfunction clamp( v ) {\n\n\t\t\t\treturn Math.max( 0, Math.min( 1, parseFloatWithUnits( v ) ) );\n\n\t\t\t}\n\n\t\t\tfunction positive( v ) {\n\n\t\t\t\treturn Math.max( 0, parseFloatWithUnits( v ) );\n\n\t\t\t}\n\n\t\t\taddStyle( 'fill', 'fill' );\n\t\t\taddStyle( 'fill-opacity', 'fillOpacity', clamp );\n\t\t\taddStyle( 'fill-rule', 'fillRule' );\n\t\t\taddStyle( 'opacity', 'opacity', clamp );\n\t\t\taddStyle( 'stroke', 'stroke' );\n\t\t\taddStyle( 'stroke-opacity', 'strokeOpacity', clamp );\n\t\t\taddStyle( 'stroke-width', 'strokeWidth', positive );\n\t\t\taddStyle( 'stroke-linejoin', 'strokeLineJoin' );\n\t\t\taddStyle( 'stroke-linecap', 'strokeLineCap' );\n\t\t\taddStyle( 'stroke-miterlimit', 'strokeMiterLimit', positive );\n\t\t\taddStyle( 'visibility', 'visibility' );\n\n\t\t\treturn style;\n\n\t\t}\n\n\t\t// http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\t\tfunction getReflection( a, b ) {\n\n\t\t\treturn a - ( b - a );\n\n\t\t}\n\n\t\t// from https://github.com/ppvg/svg-numbers (MIT License)\n\n\t\tfunction parseFloats( input, flags, stride ) {\n\n\t\t\tif ( typeof input !== 'string' ) {\n\n\t\t\t\tthrow new TypeError( 'Invalid input: ' + typeof input );\n\n\t\t\t}\n\n\t\t\t// Character groups\n\t\t\tconst RE = {\n\t\t\t\tSEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n\t\t\t\tWHITESPACE: /[ \\t\\r\\n]/,\n\t\t\t\tDIGIT: /[\\d]/,\n\t\t\t\tSIGN: /[-+]/,\n\t\t\t\tPOINT: /\\./,\n\t\t\t\tCOMMA: /,/,\n\t\t\t\tEXP: /e/i,\n\t\t\t\tFLAGS: /[01]/\n\t\t\t};\n\n\t\t\t// States\n\t\t\tconst SEP = 0;\n\t\t\tconst INT = 1;\n\t\t\tconst FLOAT = 2;\n\t\t\tconst EXP = 3;\n\n\t\t\tlet state = SEP;\n\t\t\tlet seenComma = true;\n\t\t\tlet number = '', exponent = '';\n\t\t\tconst result = [];\n\n\t\t\tfunction throwSyntaxError( current, i, partial ) {\n\n\t\t\t\tconst error = new SyntaxError( 'Unexpected character \"' + current + '\" at index ' + i + '.' );\n\t\t\t\terror.partial = partial;\n\t\t\t\tthrow error;\n\n\t\t\t}\n\n\t\t\tfunction newNumber() {\n\n\t\t\t\tif ( number !== '' ) {\n\n\t\t\t\t\tif ( exponent === '' ) result.push( Number( number ) );\n\t\t\t\t\telse result.push( Number( number ) * Math.pow( 10, Number( exponent ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tnumber = '';\n\t\t\t\texponent = '';\n\n\t\t\t}\n\n\t\t\tlet current;\n\t\t\tconst length = input.length;\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tcurrent = input[ i ];\n\n\t\t\t\t// check for flags\n\t\t\t\tif ( Array.isArray( flags ) && flags.includes( result.length % stride ) && RE.FLAGS.test( current ) ) {\n\n\t\t\t\t\tstate = INT;\n\t\t\t\t\tnumber = current;\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// parse until next number\n\t\t\t\tif ( state === SEP ) {\n\n\t\t\t\t\t// eat whitespace\n\t\t\t\t\tif ( RE.WHITESPACE.test( current ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// start new number\n\t\t\t\t\tif ( RE.DIGIT.test( current ) || RE.SIGN.test( current ) ) {\n\n\t\t\t\t\t\tstate = INT;\n\t\t\t\t\t\tnumber = current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\t\tnumber = current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double commas (e.g. \"1, , 2\")\n\t\t\t\t\tif ( RE.COMMA.test( current ) ) {\n\n\t\t\t\t\t\tif ( seenComma ) {\n\n\t\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tseenComma = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse integer part\n\t\t\t\tif ( state === INT ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.EXP.test( current ) ) {\n\n\t\t\t\t\t\tstate = EXP;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\t\t\t\t\tif ( RE.SIGN.test( current )\n\t\t\t\t\t\t\t&& number.length === 1\n\t\t\t\t\t\t\t&& RE.SIGN.test( number[ 0 ] ) ) {\n\n\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse decimal part\n\t\t\t\tif ( state === FLOAT ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.EXP.test( current ) ) {\n\n\t\t\t\t\t\tstate = EXP;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double decimal points (e.g. \"1..2\")\n\t\t\t\t\tif ( RE.POINT.test( current ) && number[ number.length - 1 ] === '.' ) {\n\n\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse exponent part\n\t\t\t\tif ( state === EXP ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\texponent += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.SIGN.test( current ) ) {\n\n\t\t\t\t\t\tif ( exponent === '' ) {\n\n\t\t\t\t\t\t\texponent += current;\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( exponent.length === 1 && RE.SIGN.test( exponent ) ) {\n\n\t\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t// end of number\n\t\t\t\tif ( RE.WHITESPACE.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = SEP;\n\t\t\t\t\tseenComma = false;\n\n\t\t\t\t} else if ( RE.COMMA.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = SEP;\n\t\t\t\t\tseenComma = true;\n\n\t\t\t\t} else if ( RE.SIGN.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = INT;\n\t\t\t\t\tnumber = current;\n\n\t\t\t\t} else if ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\tnumber = current;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add the last number found (if any)\n\t\t\tnewNumber();\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\t// Units\n\n\t\tconst units = [ 'mm', 'cm', 'in', 'pt', 'pc', 'px' ];\n\n\t\t// Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\t\tconst unitConversion = {\n\n\t\t\t'mm': {\n\t\t\t\t'mm': 1,\n\t\t\t\t'cm': 0.1,\n\t\t\t\t'in': 1 / 25.4,\n\t\t\t\t'pt': 72 / 25.4,\n\t\t\t\t'pc': 6 / 25.4,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'cm': {\n\t\t\t\t'mm': 10,\n\t\t\t\t'cm': 1,\n\t\t\t\t'in': 1 / 2.54,\n\t\t\t\t'pt': 72 / 2.54,\n\t\t\t\t'pc': 6 / 2.54,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'in': {\n\t\t\t\t'mm': 25.4,\n\t\t\t\t'cm': 2.54,\n\t\t\t\t'in': 1,\n\t\t\t\t'pt': 72,\n\t\t\t\t'pc': 6,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'pt': {\n\t\t\t\t'mm': 25.4 / 72,\n\t\t\t\t'cm': 2.54 / 72,\n\t\t\t\t'in': 1 / 72,\n\t\t\t\t'pt': 1,\n\t\t\t\t'pc': 6 / 72,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'pc': {\n\t\t\t\t'mm': 25.4 / 6,\n\t\t\t\t'cm': 2.54 / 6,\n\t\t\t\t'in': 1 / 6,\n\t\t\t\t'pt': 72 / 6,\n\t\t\t\t'pc': 1,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'px': {\n\t\t\t\t'px': 1\n\t\t\t}\n\n\t\t};\n\n\t\tfunction parseFloatWithUnits( string ) {\n\n\t\t\tlet theUnit = 'px';\n\n\t\t\tif ( typeof string === 'string' || string instanceof String ) {\n\n\t\t\t\tfor ( let i = 0, n = units.length; i < n; i ++ ) {\n\n\t\t\t\t\tconst u = units[ i ];\n\n\t\t\t\t\tif ( string.endsWith( u ) ) {\n\n\t\t\t\t\t\ttheUnit = u;\n\t\t\t\t\t\tstring = string.substring( 0, string.length - u.length );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet scale = undefined;\n\n\t\t\tif ( theUnit === 'px' && scope.defaultUnit !== 'px' ) {\n\n\t\t\t\t// Conversion scale from  pixels to inches, then to default units\n\n\t\t\t\tscale = unitConversion[ 'in' ][ scope.defaultUnit ] / scope.defaultDPI;\n\n\t\t\t} else {\n\n\t\t\t\tscale = unitConversion[ theUnit ][ scope.defaultUnit ];\n\n\t\t\t\tif ( scale < 0 ) {\n\n\t\t\t\t\t// Conversion scale to pixels\n\n\t\t\t\t\tscale = unitConversion[ theUnit ][ 'in' ] * scope.defaultDPI;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn scale * parseFloat( string );\n\n\t\t}\n\n\t\t// Transforms\n\n\t\tfunction getNodeTransform( node ) {\n\n\t\t\tif ( ! ( node.hasAttribute( 'transform' ) || ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) ) ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tconst transform = parseNodeTransform( node );\n\n\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\ttransform.premultiply( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tcurrentTransform.copy( transform );\n\t\t\ttransformStack.push( transform );\n\n\t\t\treturn transform;\n\n\t\t}\n\n\t\tfunction parseNodeTransform( node ) {\n\n\t\t\tconst transform = new Matrix3();\n\t\t\tconst currentTransform = tempTransform0;\n\n\t\t\tif ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) {\n\n\t\t\t\tconst tx = parseFloatWithUnits( node.getAttribute( 'x' ) );\n\t\t\t\tconst ty = parseFloatWithUnits( node.getAttribute( 'y' ) );\n\n\t\t\t\ttransform.translate( tx, ty );\n\n\t\t\t}\n\n\t\t\tif ( node.hasAttribute( 'transform' ) ) {\n\n\t\t\t\tconst transformsTexts = node.getAttribute( 'transform' ).split( ')' );\n\n\t\t\t\tfor ( let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex -- ) {\n\n\t\t\t\t\tconst transformText = transformsTexts[ tIndex ].trim();\n\n\t\t\t\t\tif ( transformText === '' ) continue;\n\n\t\t\t\t\tconst openParPos = transformText.indexOf( '(' );\n\t\t\t\t\tconst closeParPos = transformText.length;\n\n\t\t\t\t\tif ( openParPos > 0 && openParPos < closeParPos ) {\n\n\t\t\t\t\t\tconst transformType = transformText.slice( 0, openParPos );\n\n\t\t\t\t\t\tconst array = parseFloats( transformText.slice( openParPos + 1 ) );\n\n\t\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t\t\tswitch ( transformType ) {\n\n\t\t\t\t\t\t\tcase 'translate':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tconst tx = array[ 0 ];\n\t\t\t\t\t\t\t\t\tlet ty = 0;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tty = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.translate( tx, ty );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'rotate':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tlet angle = 0;\n\t\t\t\t\t\t\t\t\tlet cx = 0;\n\t\t\t\t\t\t\t\t\tlet cy = 0;\n\n\t\t\t\t\t\t\t\t\t// Angle\n\t\t\t\t\t\t\t\t\tangle = array[ 0 ] * Math.PI / 180;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 3 ) {\n\n\t\t\t\t\t\t\t\t\t\t// Center x, y\n\t\t\t\t\t\t\t\t\t\tcx = array[ 1 ];\n\t\t\t\t\t\t\t\t\t\tcy = array[ 2 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Rotate around center (cx, cy)\n\t\t\t\t\t\t\t\t\ttempTransform1.makeTranslation( - cx, - cy );\n\t\t\t\t\t\t\t\t\ttempTransform2.makeRotation( angle );\n\t\t\t\t\t\t\t\t\ttempTransform3.multiplyMatrices( tempTransform2, tempTransform1 );\n\t\t\t\t\t\t\t\t\ttempTransform1.makeTranslation( cx, cy );\n\t\t\t\t\t\t\t\t\tcurrentTransform.multiplyMatrices( tempTransform1, tempTransform3 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'scale':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tconst scaleX = array[ 0 ];\n\t\t\t\t\t\t\t\t\tlet scaleY = scaleX;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tscaleY = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.scale( scaleX, scaleY );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'skewX':\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, Math.tan( array[ 0 ] * Math.PI / 180 ), 0,\n\t\t\t\t\t\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'skewY':\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t\t\t\t\t\tMath.tan( array[ 0 ] * Math.PI / 180 ), 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'matrix':\n\n\t\t\t\t\t\t\t\tif ( array.length === 6 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\tarray[ 0 ], array[ 2 ], array[ 4 ],\n\t\t\t\t\t\t\t\t\t\tarray[ 1 ], array[ 3 ], array[ 5 ],\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttransform.premultiply( currentTransform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transform;\n\n\t\t}\n\n\t\tfunction transformPath( path, m ) {\n\n\t\t\tfunction transfVec2( v2 ) {\n\n\t\t\t\ttempV3.set( v2.x, v2.y, 1 ).applyMatrix3( m );\n\n\t\t\t\tv2.set( tempV3.x, tempV3.y );\n\n\t\t\t}\n\n\t\t\tfunction transfEllipseGeneric( curve ) {\n\n\t\t\t\t// For math description see:\n\t\t\t\t// https://math.stackexchange.com/questions/4544164\n\n\t\t\t\tconst a = curve.xRadius;\n\t\t\t\tconst b = curve.yRadius;\n\n\t\t\t\tconst cosTheta = Math.cos( curve.aRotation );\n\t\t\t\tconst sinTheta = Math.sin( curve.aRotation );\n\n\t\t\t\tconst v1 = new Vector3( a * cosTheta, a * sinTheta, 0 );\n\t\t\t\tconst v2 = new Vector3( -b * sinTheta, b * cosTheta, 0 );\n\n\t\t\t\tconst f1 = v1.applyMatrix3( m );\n\t\t\t\tconst f2 = v2.applyMatrix3( m );\n\n\t\t\t\tconst mF = tempTransform0.set(\n\t\t\t\t\tf1.x, f2.x, 0,\n\t\t\t\t\tf1.y, f2.y, 0,\n\t\t\t\t\t0,    0,    1,\n\t\t\t\t);\n\n\t\t\t\tconst mFInv = tempTransform1.copy( mF ).invert();\n\t\t\t\tconst mFInvT = tempTransform2.copy( mFInv ).transpose();\n\t\t\t\tconst mQ = mFInvT.multiply( mFInv );\n\t\t\t\tconst mQe = mQ.elements;\n\n\t\t\t\tconst ed = eigenDecomposition( mQe[0], mQe[1], mQe[4] );\n\t\t\t\tconst rt1sqrt = Math.sqrt( ed.rt1 );\n\t\t\t\tconst rt2sqrt = Math.sqrt( ed.rt2 );\n\n\t\t\t\tcurve.xRadius = 1 / rt1sqrt;\n\t\t\t\tcurve.yRadius = 1 / rt2sqrt;\n\t\t\t\tcurve.aRotation = Math.atan2( ed.sn, ed.cs );\n\n\t\t\t\tconst isFullEllipse =\n\t\t\t\t\t( curve.aEndAngle - curve.aStartAngle ) % ( 2 * Math.PI ) < Number.EPSILON;\n\n\t\t\t\t// Do not touch angles of a full ellipse because after transformation they\n\t\t\t\t// would converge to a sinle value effectively removing the whole curve\n\n\t\t\t\tif ( !isFullEllipse ) {\n\n\t\t\t\t\tconst mDsqrt = tempTransform1.set(\n\t\t\t\t\t\trt1sqrt, 0, 0,\n\t\t\t\t\t\t0, rt2sqrt, 0,\n\t\t\t\t\t\t0, 0,       1,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst mRT = tempTransform2.set(\n\t\t\t\t\t\ted.cs,  ed.sn, 0,\n\t\t\t\t\t\t-ed.sn, ed.cs, 0,\n\t\t\t\t\t\t0,      0,     1,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst mDRF = mDsqrt.multiply( mRT ).multiply( mF );\n\n\t\t\t\t\tconst transformAngle = phi => {\n\n\t\t\t\t\t\tconst { x: cosR, y: sinR } =\n\t\t\t\t\t\t\tnew Vector3( Math.cos( phi ), Math.sin( phi ), 0 ).applyMatrix3( mDRF );\n\n\t\t\t\t\t\treturn Math.atan2( sinR, cosR );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tcurve.aStartAngle = transformAngle( curve.aStartAngle );\n\t\t\t\t\tcurve.aEndAngle = transformAngle( curve.aEndAngle );\n\n\t\t\t\t\tif ( isTransformFlipped( m ) ) {\n\n\t\t\t\t\t\tcurve.aClockwise = !curve.aClockwise;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction transfEllipseNoSkew( curve ) {\n\n\t\t\t\t// Faster shortcut if no skew is applied\n\t\t\t\t// (e.g, a euclidean transform of a group containing the ellipse)\n\n\t\t\t\tconst sx = getTransformScaleX( m );\n\t\t\t\tconst sy = getTransformScaleY( m );\n\n\t\t\t\tcurve.xRadius *= sx;\n\t\t\t\tcurve.yRadius *= sy;\n\n\t\t\t\t// Extract rotation angle from the matrix of form:\n\t\t\t\t//\n\t\t\t\t//  | cosθ sx   -sinθ sy |\n\t\t\t\t//  | sinθ sx    cosθ sy |\n\t\t\t\t//\n\t\t\t\t// Remembering that tanθ = sinθ / cosθ; and that\n\t\t\t\t// `sx`, `sy`, or both might be zero.\n\t\t\t\tconst theta =\n\t\t\t\t\tsx > Number.EPSILON\n\t\t\t\t\t? Math.atan2( m.elements[ 1 ], m.elements[ 0 ] )\n\t\t\t\t\t: Math.atan2( - m.elements[ 3 ], m.elements[ 4 ] );\n\n\t\t\t\tcurve.aRotation += theta;\n\n\t\t\t\tif ( isTransformFlipped( m ) ) {\n\n\t\t\t\t\tcurve.aStartAngle *= -1;\n\t\t\t\t\tcurve.aEndAngle *= -1;\n\t\t\t\t\tcurve.aClockwise = !curve.aClockwise;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst subPaths = path.subPaths;\n\n\t\t\tfor ( let i = 0, n = subPaths.length; i < n; i ++ ) {\n\n\t\t\t\tconst subPath = subPaths[ i ];\n\t\t\t\tconst curves = subPath.curves;\n\n\t\t\t\tfor ( let j = 0; j < curves.length; j ++ ) {\n\n\t\t\t\t\tconst curve = curves[ j ];\n\n\t\t\t\t\tif ( curve.isLineCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t} else if ( curve.isCubicBezierCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\t\t\t\t\t\ttransfVec2( curve.v3 );\n\n\t\t\t\t\t} else if ( curve.isQuadraticBezierCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t} else if ( curve.isEllipseCurve ) {\n\n\t\t\t\t\t\t// Transform ellipse center point\n\n\t\t\t\t\t\ttempV2.set( curve.aX, curve.aY );\n\t\t\t\t\t\ttransfVec2( tempV2 );\n\t\t\t\t\t\tcurve.aX = tempV2.x;\n\t\t\t\t\t\tcurve.aY = tempV2.y;\n\n\t\t\t\t\t\t// Transform ellipse shape parameters\n\n\t\t\t\t\t\tif ( isTransformSkewed( m ) ) {\n\n\t\t\t\t\t\t\ttransfEllipseGeneric( curve );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttransfEllipseNoSkew( curve );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isTransformFlipped( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\treturn te[ 0 ] * te[ 4 ] - te[ 1 ] * te[ 3 ] < 0;\n\n\t\t}\n\n\t\tfunction isTransformSkewed( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\tconst basisDot = te[ 0 ] * te[ 3 ] + te[ 1 ] * te[ 4 ];\n\n\t\t\t// Shortcut for trivial rotations and transformations\n\t\t\tif ( basisDot === 0 ) return false;\n\n\t\t\tconst sx = getTransformScaleX( m );\n\t\t\tconst sy = getTransformScaleY( m );\n\n\t\t\treturn Math.abs( basisDot / ( sx * sy ) ) > Number.EPSILON;\n\n\t\t}\n\n\t\tfunction getTransformScaleX( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\treturn Math.sqrt( te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] );\n\n\t\t}\n\n\t\tfunction getTransformScaleY( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\treturn Math.sqrt( te[ 3 ] * te[ 3 ] + te[ 4 ] * te[ 4 ] );\n\n\t\t}\n\n\t\t// Calculates the eigensystem of a real symmetric 2x2 matrix\n\t\t//    [ A  B ]\n\t\t//    [ B  C ]\n\t\t// in the form\n\t\t//    [ A  B ]  =  [ cs  -sn ] [ rt1   0  ] [  cs  sn ]\n\t\t//    [ B  C ]     [ sn   cs ] [  0   rt2 ] [ -sn  cs ]\n\t\t// where rt1 >= rt2.\n\t\t//\n\t\t// Adapted from: https://www.mpi-hd.mpg.de/personalhomes/globes/3x3/index.html\n\t\t// -> Algorithms for real symmetric matrices -> Analytical (2x2 symmetric)\n\t\tfunction eigenDecomposition( A, B, C ) {\n\n\t\t\tlet rt1, rt2, cs, sn, t;\n\t\t\tconst sm = A + C;\n\t\t\tconst df = A - C;\n\t\t\tconst rt = Math.sqrt( df * df + 4 * B * B );\n\n\t\t\tif ( sm > 0 ) {\n\n\t\t\t\trt1 = 0.5 * ( sm + rt );\n\t\t\t\tt = 1 / rt1;\n\t\t\t\trt2 = A * t * C - B * t * B;\n\n\t\t\t} else if ( sm < 0 ) {\n\n\t\t\t\trt2 = 0.5 * ( sm - rt );\n\n\t\t\t} else {\n\n\t\t\t\t// This case needs to be treated separately to avoid div by 0\n\n\t\t\t\trt1 = 0.5 * rt;\n\t\t\t\trt2 = -0.5 * rt;\n\n\t\t\t}\n\n\t\t\t// Calculate eigenvectors\n\n\t\t\tif ( df > 0 ) {\n\n\t\t\t\tcs = df + rt;\n\n\t\t\t} else {\n\n\t\t\t\tcs = df - rt;\n\n\t\t\t}\n\n\t\t\tif ( Math.abs( cs ) > 2 * Math.abs( B ) ) {\n\n\t\t\t\tt = -2 * B / cs;\n\t\t\t\tsn = 1 / Math.sqrt( 1 + t * t );\n\t\t\t\tcs = t * sn;\n\n\t\t\t} else if ( Math.abs( B ) === 0 ) {\n\n\t\t\t\tcs = 1;\n\t\t\t\tsn = 0;\n\n\t\t\t} else {\n\n\t\t\t\tt = -0.5 * cs / B;\n\t\t\t\tcs = 1 / Math.sqrt( 1 + t * t );\n\t\t\t\tsn = t * cs;\n\n\t\t\t}\n\n\t\t\tif ( df > 0 ) {\n\n\t\t\t\tt = cs;\n\t\t\t\tcs = -sn;\n\t\t\t\tsn = t;\n\n\t\t\t}\n\n\t\t\treturn { rt1, rt2, cs, sn };\n\n\t\t}\n\n\t\t//\n\n\t\tconst paths = [];\n\t\tconst stylesheets = {};\n\n\t\tconst transformStack = [];\n\n\t\tconst tempTransform0 = new Matrix3();\n\t\tconst tempTransform1 = new Matrix3();\n\t\tconst tempTransform2 = new Matrix3();\n\t\tconst tempTransform3 = new Matrix3();\n\t\tconst tempV2 = new Vector2();\n\t\tconst tempV3 = new Vector3();\n\n\t\tconst currentTransform = new Matrix3();\n\n\t\tconst xml = new DOMParser().parseFromString( text, 'image/svg+xml' ); // application/xml\n\n\t\tparseNode( xml.documentElement, {\n\t\t\tfill: '#000',\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeOpacity: 1,\n\t\t\tstrokeWidth: 1,\n\t\t\tstrokeLineJoin: 'miter',\n\t\t\tstrokeLineCap: 'butt',\n\t\t\tstrokeMiterLimit: 4\n\t\t} );\n\n\t\tconst data = { paths: paths, xml: xml.documentElement };\n\n\t\t// console.log( paths );\n\t\treturn data;\n\n\t}\n\n\tstatic createShapes( shapePath ) {\n\n\t\t// Param shapePath: a shapepath as returned by the parse function of this class\n\t\t// Returns Shape object\n\n\t\tconst BIGNUMBER = 999999999;\n\n\t\tconst IntersectionLocationType = {\n\t\t\tORIGIN: 0,\n\t\t\tDESTINATION: 1,\n\t\t\tBETWEEN: 2,\n\t\t\tLEFT: 3,\n\t\t\tRIGHT: 4,\n\t\t\tBEHIND: 5,\n\t\t\tBEYOND: 6\n\t\t};\n\n\t\tconst classifyResult = {\n\t\t\tloc: IntersectionLocationType.ORIGIN,\n\t\t\tt: 0\n\t\t};\n\n\t\tfunction findEdgeIntersection( a0, a1, b0, b1 ) {\n\n\t\t\tconst x1 = a0.x;\n\t\t\tconst x2 = a1.x;\n\t\t\tconst x3 = b0.x;\n\t\t\tconst x4 = b1.x;\n\t\t\tconst y1 = a0.y;\n\t\t\tconst y2 = a1.y;\n\t\t\tconst y3 = b0.y;\n\t\t\tconst y4 = b1.y;\n\t\t\tconst nom1 = ( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 );\n\t\t\tconst nom2 = ( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 );\n\t\t\tconst denom = ( y4 - y3 ) * ( x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );\n\t\t\tconst t1 = nom1 / denom;\n\t\t\tconst t2 = nom2 / denom;\n\n\t\t\tif ( ( ( denom === 0 ) && ( nom1 !== 0 ) ) || ( t1 <= 0 ) || ( t1 >= 1 ) || ( t2 < 0 ) || ( t2 > 1 ) ) {\n\n\t\t\t\t//1. lines are parallel or edges don't intersect\n\n\t\t\t\treturn null;\n\n\t\t\t} else if ( ( nom1 === 0 ) && ( denom === 0 ) ) {\n\n\t\t\t\t//2. lines are colinear\n\n\t\t\t\t//check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n\t\t\t\tfor ( let i = 0; i < 2; i ++ ) {\n\n\t\t\t\t\tclassifyPoint( i === 0 ? b0 : b1, a0, a1 );\n\t\t\t\t\t//find position of this endpoints relatively to edge1\n\t\t\t\t\tif ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {\n\n\t\t\t\t\t\tconst point = ( i === 0 ? b0 : b1 );\n\t\t\t\t\t\treturn { x: point.x, y: point.y, t: classifyResult.t };\n\n\t\t\t\t\t} else if ( classifyResult.loc == IntersectionLocationType.BETWEEN ) {\n\n\t\t\t\t\t\tconst x = + ( ( x1 + classifyResult.t * ( x2 - x1 ) ).toPrecision( 10 ) );\n\t\t\t\t\t\tconst y = + ( ( y1 + classifyResult.t * ( y2 - y1 ) ).toPrecision( 10 ) );\n\t\t\t\t\t\treturn { x: x, y: y, t: classifyResult.t, };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t} else {\n\n\t\t\t\t//3. edges intersect\n\n\t\t\t\tfor ( let i = 0; i < 2; i ++ ) {\n\n\t\t\t\t\tclassifyPoint( i === 0 ? b0 : b1, a0, a1 );\n\n\t\t\t\t\tif ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {\n\n\t\t\t\t\t\tconst point = ( i === 0 ? b0 : b1 );\n\t\t\t\t\t\treturn { x: point.x, y: point.y, t: classifyResult.t };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst x = + ( ( x1 + t1 * ( x2 - x1 ) ).toPrecision( 10 ) );\n\t\t\t\tconst y = + ( ( y1 + t1 * ( y2 - y1 ) ).toPrecision( 10 ) );\n\t\t\t\treturn { x: x, y: y, t: t1 };\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction classifyPoint( p, edgeStart, edgeEnd ) {\n\n\t\t\tconst ax = edgeEnd.x - edgeStart.x;\n\t\t\tconst ay = edgeEnd.y - edgeStart.y;\n\t\t\tconst bx = p.x - edgeStart.x;\n\t\t\tconst by = p.y - edgeStart.y;\n\t\t\tconst sa = ax * by - bx * ay;\n\n\t\t\tif ( ( p.x === edgeStart.x ) && ( p.y === edgeStart.y ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.ORIGIN;\n\t\t\t\tclassifyResult.t = 0;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ( p.x === edgeEnd.x ) && ( p.y === edgeEnd.y ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.DESTINATION;\n\t\t\t\tclassifyResult.t = 1;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( sa < - Number.EPSILON ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.LEFT;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( sa > Number.EPSILON ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.RIGHT;\n\t\t\t\treturn;\n\n\n\t\t\t}\n\n\t\t\tif ( ( ( ax * bx ) < 0 ) || ( ( ay * by ) < 0 ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.BEHIND;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ( Math.sqrt( ax * ax + ay * ay ) ) < ( Math.sqrt( bx * bx + by * by ) ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.BEYOND;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet t;\n\n\t\t\tif ( ax !== 0 ) {\n\n\t\t\t\tt = bx / ax;\n\n\t\t\t} else {\n\n\t\t\t\tt = by / ay;\n\n\t\t\t}\n\n\t\t\tclassifyResult.loc = IntersectionLocationType.BETWEEN;\n\t\t\tclassifyResult.t = t;\n\n\t\t}\n\n\t\tfunction getIntersections( path1, path2 ) {\n\n\t\t\tconst intersectionsRaw = [];\n\t\t\tconst intersections = [];\n\n\t\t\tfor ( let index = 1; index < path1.length; index ++ ) {\n\n\t\t\t\tconst path1EdgeStart = path1[ index - 1 ];\n\t\t\t\tconst path1EdgeEnd = path1[ index ];\n\n\t\t\t\tfor ( let index2 = 1; index2 < path2.length; index2 ++ ) {\n\n\t\t\t\t\tconst path2EdgeStart = path2[ index2 - 1 ];\n\t\t\t\t\tconst path2EdgeEnd = path2[ index2 ];\n\n\t\t\t\t\tconst intersection = findEdgeIntersection( path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd );\n\n\t\t\t\t\tif ( intersection !== null && intersectionsRaw.find( i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON ) === undefined ) {\n\n\t\t\t\t\t\tintersectionsRaw.push( intersection );\n\t\t\t\t\t\tintersections.push( new Vector2( intersection.x, intersection.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn intersections;\n\n\t\t}\n\n\t\tfunction getScanlineIntersections( scanline, boundingBox, paths ) {\n\n\t\t\tconst center = new Vector2();\n\t\t\tboundingBox.getCenter( center );\n\n\t\t\tconst allIntersections = [];\n\n\t\t\tpaths.forEach( path => {\n\n\t\t\t\t// check if the center of the bounding box is in the bounding box of the paths.\n\t\t\t\t// this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n\t\t\t\t// if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n\t\t\t\tif ( path.boundingBox.containsPoint( center ) ) {\n\n\t\t\t\t\tconst intersections = getIntersections( scanline, path.points );\n\n\t\t\t\t\tintersections.forEach( p => {\n\n\t\t\t\t\t\tallIntersections.push( { identifier: path.identifier, isCW: path.isCW, point: p } );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tallIntersections.sort( ( i1, i2 ) => {\n\n\t\t\t\treturn i1.point.x - i2.point.x;\n\n\t\t\t} );\n\n\t\t\treturn allIntersections;\n\n\t\t}\n\n\t\tfunction isHoleTo( simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule ) {\n\n\t\t\tif ( _fillRule === null || _fillRule === undefined || _fillRule === '' ) {\n\n\t\t\t\t_fillRule = 'nonzero';\n\n\t\t\t}\n\n\t\t\tconst centerBoundingBox = new Vector2();\n\t\t\tsimplePath.boundingBox.getCenter( centerBoundingBox );\n\n\t\t\tconst scanline = [ new Vector2( scanlineMinX, centerBoundingBox.y ), new Vector2( scanlineMaxX, centerBoundingBox.y ) ];\n\n\t\t\tconst scanlineIntersections = getScanlineIntersections( scanline, simplePath.boundingBox, allPaths );\n\n\t\t\tscanlineIntersections.sort( ( i1, i2 ) => {\n\n\t\t\t\treturn i1.point.x - i2.point.x;\n\n\t\t\t} );\n\n\t\t\tconst baseIntersections = [];\n\t\t\tconst otherIntersections = [];\n\n\t\t\tscanlineIntersections.forEach( i => {\n\n\t\t\t\tif ( i.identifier === simplePath.identifier ) {\n\n\t\t\t\t\tbaseIntersections.push( i );\n\n\t\t\t\t} else {\n\n\t\t\t\t\totherIntersections.push( i );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst firstXOfPath = baseIntersections[ 0 ].point.x;\n\n\t\t\t// build up the path hierarchy\n\t\t\tconst stack = [];\n\t\t\tlet i = 0;\n\n\t\t\twhile ( i < otherIntersections.length && otherIntersections[ i ].point.x < firstXOfPath ) {\n\n\t\t\t\tif ( stack.length > 0 && stack[ stack.length - 1 ] === otherIntersections[ i ].identifier ) {\n\n\t\t\t\t\tstack.pop();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( otherIntersections[ i ].identifier );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\tstack.push( simplePath.identifier );\n\n\t\t\tif ( _fillRule === 'evenodd' ) {\n\n\t\t\t\tconst isHole = stack.length % 2 === 0 ? true : false;\n\t\t\t\tconst isHoleFor = stack[ stack.length - 2 ];\n\n\t\t\t\treturn { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };\n\n\t\t\t} else if ( _fillRule === 'nonzero' ) {\n\n\t\t\t\t// check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n\t\t\t\tlet isHole = true;\n\t\t\t\tlet isHoleFor = null;\n\t\t\t\tlet lastCWValue = null;\n\n\t\t\t\tfor ( let i = 0; i < stack.length; i ++ ) {\n\n\t\t\t\t\tconst identifier = stack[ i ];\n\t\t\t\t\tif ( isHole ) {\n\n\t\t\t\t\t\tlastCWValue = allPaths[ identifier ].isCW;\n\t\t\t\t\t\tisHole = false;\n\t\t\t\t\t\tisHoleFor = identifier;\n\n\t\t\t\t\t} else if ( lastCWValue !== allPaths[ identifier ].isCW ) {\n\n\t\t\t\t\t\tlastCWValue = allPaths[ identifier ].isCW;\n\t\t\t\t\t\tisHole = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'fill-rule: \"' + _fillRule + '\" is currently not implemented.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check for self intersecting paths\n\t\t// TODO\n\n\t\t// check intersecting paths\n\t\t// TODO\n\n\t\t// prepare paths for hole detection\n\t\tlet scanlineMinX = BIGNUMBER;\n\t\tlet scanlineMaxX = - BIGNUMBER;\n\n\t\tlet simplePaths = shapePath.subPaths.map( p => {\n\n\t\t\tconst points = p.getPoints();\n\t\t\tlet maxY = - BIGNUMBER;\n\t\t\tlet minY = BIGNUMBER;\n\t\t\tlet maxX = - BIGNUMBER;\n\t\t\tlet minX = BIGNUMBER;\n\n\t      \t//points.forEach(p => p.y *= -1);\n\n\t\t\tfor ( let i = 0; i < points.length; i ++ ) {\n\n\t\t\t\tconst p = points[ i ];\n\n\t\t\t\tif ( p.y > maxY ) {\n\n\t\t\t\t\tmaxY = p.y;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.y < minY ) {\n\n\t\t\t\t\tminY = p.y;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.x > maxX ) {\n\n\t\t\t\t\tmaxX = p.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.x < minX ) {\n\n\t\t\t\t\tminX = p.x;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scanlineMaxX <= maxX ) {\n\n\t\t\t\tscanlineMaxX = maxX + 1;\n\n\t\t\t}\n\n\t\t\tif ( scanlineMinX >= minX ) {\n\n\t\t\t\tscanlineMinX = minX - 1;\n\n\t\t\t}\n\n\t\t\treturn { curves: p.curves, points: points, isCW: ShapeUtils.isClockWise( points ), identifier: -1, boundingBox: new Box2( new Vector2( minX, minY ), new Vector2( maxX, maxY ) ) };\n\n\t\t} );\n\n\t\tsimplePaths = simplePaths.filter( sp => sp.points.length > 1 );\n\n\t\tfor ( let identifier = 0; identifier < simplePaths.length; identifier++ ) {\n\n\t\t\tsimplePaths[identifier].identifier = identifier;\n\n\t\t}\n\n\t\t// check if path is solid or a hole\n\t\tconst isAHole = simplePaths.map( p => isHoleTo( p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData?.style.fillRule ) );\n\n\n\t\tconst shapesToReturn = [];\n\t\tsimplePaths.forEach( p => {\n\n\t\t\tconst amIAHole = isAHole[ p.identifier ];\n\n\t\t\tif ( ! amIAHole.isHole ) {\n\n\t\t\t\tconst shape = new Shape();\n\t\t\t\tshape.curves = p.curves;\n\t\t\t\tconst holes = isAHole.filter( h => h.isHole && h.for === p.identifier );\n\t\t\t\tholes.forEach( h => {\n\n\t\t\t\t\tconst hole = simplePaths[ h.identifier ];\n\t\t\t\t\tconst path = new Path();\n\t\t\t\t\tpath.curves = hole.curves;\n\t\t\t\t\tshape.holes.push( path );\n\n\t\t\t\t} );\n\t\t\t\tshapesToReturn.push( shape );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn shapesToReturn;\n\n\t}\n\n\tstatic getStrokeStyle( width, color, lineJoin, lineCap, miterLimit ) {\n\n\t\t// Param width: Stroke width\n\t\t// Param color: As returned by THREE.Color.getStyle()\n\t\t// Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n\t\t// Param lineCap: One of \"round\", \"square\" or \"butt\"\n\t\t// Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n\t\t// Returns style object\n\n\t\twidth = width !== undefined ? width : 1;\n\t\tcolor = color !== undefined ? color : '#000';\n\t\tlineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n\t\tlineCap = lineCap !== undefined ? lineCap : 'butt';\n\t\tmiterLimit = miterLimit !== undefined ? miterLimit : 4;\n\n\t\treturn {\n\t\t\tstrokeColor: color,\n\t\t\tstrokeWidth: width,\n\t\t\tstrokeLineJoin: lineJoin,\n\t\t\tstrokeLineCap: lineCap,\n\t\t\tstrokeMiterLimit: miterLimit\n\t\t};\n\n\t}\n\n\tstatic pointsToStroke( points, style, arcDivisions, minDistance ) {\n\n\t\t// Generates a stroke with some witdh around the given path.\n\t\t// The path can be open or closed (last point equals to first point)\n\t\t// Param points: Array of Vector2D (the path). Minimum 2 points.\n\t\t// Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n\t\t// Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n\t\t// Param minDistance: Points closer to this distance will be merged. (Optional)\n\t\t// Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tif ( SVGLoader.pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs ) === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\treturn geometry;\n\n\t}\n\n\tstatic pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset ) {\n\n\t\t// This function can be called to update existing arrays or buffers.\n\t\t// Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n\t\t// Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n\t\t// Returns number of written vertices / normals / uvs pairs\n\t\t// if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n\t\t// 'normals' and 'uvs' buffers are optional\n\n\t\tconst tempV2_1 = new Vector2();\n\t\tconst tempV2_2 = new Vector2();\n\t\tconst tempV2_3 = new Vector2();\n\t\tconst tempV2_4 = new Vector2();\n\t\tconst tempV2_5 = new Vector2();\n\t\tconst tempV2_6 = new Vector2();\n\t\tconst tempV2_7 = new Vector2();\n\t\tconst lastPointL = new Vector2();\n\t\tconst lastPointR = new Vector2();\n\t\tconst point0L = new Vector2();\n\t\tconst point0R = new Vector2();\n\t\tconst currentPointL = new Vector2();\n\t\tconst currentPointR = new Vector2();\n\t\tconst nextPointL = new Vector2();\n\t\tconst nextPointR = new Vector2();\n\t\tconst innerPoint = new Vector2();\n\t\tconst outerPoint = new Vector2();\n\n\t\tarcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n\t\tminDistance = minDistance !== undefined ? minDistance : 0.001;\n\t\tvertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n\n\t\t// First ensure there are no duplicated points\n\t\tpoints = removeDuplicatedPoints( points );\n\n\t\tconst numPoints = points.length;\n\n\t\tif ( numPoints < 2 ) return 0;\n\n\t\tconst isClosed = points[ 0 ].equals( points[ numPoints - 1 ] );\n\n\t\tlet currentPoint;\n\t\tlet previousPoint = points[ 0 ];\n\t\tlet nextPoint;\n\n\t\tconst strokeWidth2 = style.strokeWidth / 2;\n\n\t\tconst deltaU = 1 / ( numPoints - 1 );\n\t\tlet u0 = 0, u1;\n\n\t\tlet innerSideModified;\n\t\tlet joinIsOnLeftSide;\n\t\tlet isMiter;\n\t\tlet initialJoinIsOnLeftSide = false;\n\n\t\tlet numVertices = 0;\n\t\tlet currentCoordinate = vertexOffset * 3;\n\t\tlet currentCoordinateUV = vertexOffset * 2;\n\n\t\t// Get initial left and right stroke points\n\t\tgetNormal( points[ 0 ], points[ 1 ], tempV2_1 ).multiplyScalar( strokeWidth2 );\n\t\tlastPointL.copy( points[ 0 ] ).sub( tempV2_1 );\n\t\tlastPointR.copy( points[ 0 ] ).add( tempV2_1 );\n\t\tpoint0L.copy( lastPointL );\n\t\tpoint0R.copy( lastPointR );\n\n\t\tfor ( let iPoint = 1; iPoint < numPoints; iPoint ++ ) {\n\n\t\t\tcurrentPoint = points[ iPoint ];\n\n\t\t\t// Get next point\n\t\t\tif ( iPoint === numPoints - 1 ) {\n\n\t\t\t\tif ( isClosed ) {\n\n\t\t\t\t\t// Skip duplicated initial point\n\t\t\t\t\tnextPoint = points[ 1 ];\n\n\t\t\t\t} else nextPoint = undefined;\n\n\t\t\t} else {\n\n\t\t\t\tnextPoint = points[ iPoint + 1 ];\n\n\t\t\t}\n\n\t\t\t// Normal of previous segment in tempV2_1\n\t\t\tconst normal1 = tempV2_1;\n\t\t\tgetNormal( previousPoint, currentPoint, normal1 );\n\n\t\t\ttempV2_3.copy( normal1 ).multiplyScalar( strokeWidth2 );\n\t\t\tcurrentPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\tcurrentPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\tu1 = u0 + deltaU;\n\n\t\t\tinnerSideModified = false;\n\n\t\t\tif ( nextPoint !== undefined ) {\n\n\t\t\t\t// Normal of next segment in tempV2_2\n\t\t\t\tgetNormal( currentPoint, nextPoint, tempV2_2 );\n\n\t\t\t\ttempV2_3.copy( tempV2_2 ).multiplyScalar( strokeWidth2 );\n\t\t\t\tnextPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\t\tnextPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\t\tjoinIsOnLeftSide = true;\n\t\t\t\ttempV2_3.subVectors( nextPoint, previousPoint );\n\t\t\t\tif ( normal1.dot( tempV2_3 ) < 0 ) {\n\n\t\t\t\t\tjoinIsOnLeftSide = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( iPoint === 1 ) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n\n\t\t\t\ttempV2_3.subVectors( nextPoint, currentPoint );\n\t\t\t\ttempV2_3.normalize();\n\t\t\t\tconst dot = Math.abs( normal1.dot( tempV2_3 ) );\n\n\t\t\t\t// If path is straight, don't create join\n\t\t\t\tif ( dot > Number.EPSILON ) {\n\n\t\t\t\t\t// Compute inner and outer segment intersections\n\t\t\t\t\tconst miterSide = strokeWidth2 / dot;\n\t\t\t\t\ttempV2_3.multiplyScalar( - miterSide );\n\t\t\t\t\ttempV2_4.subVectors( currentPoint, previousPoint );\n\t\t\t\t\ttempV2_5.copy( tempV2_4 ).setLength( miterSide ).add( tempV2_3 );\n\t\t\t\t\tinnerPoint.copy( tempV2_5 ).negate();\n\t\t\t\t\tconst miterLength2 = tempV2_5.length();\n\t\t\t\t\tconst segmentLengthPrev = tempV2_4.length();\n\t\t\t\t\ttempV2_4.divideScalar( segmentLengthPrev );\n\t\t\t\t\ttempV2_6.subVectors( nextPoint, currentPoint );\n\t\t\t\t\tconst segmentLengthNext = tempV2_6.length();\n\t\t\t\t\ttempV2_6.divideScalar( segmentLengthNext );\n\t\t\t\t\t// Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\t\t\t\t\tif ( tempV2_4.dot( innerPoint ) < segmentLengthPrev && tempV2_6.dot( innerPoint ) < segmentLengthNext ) {\n\n\t\t\t\t\t\tinnerSideModified = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\touterPoint.copy( tempV2_5 ).add( currentPoint );\n\t\t\t\t\tinnerPoint.add( currentPoint );\n\n\t\t\t\t\tisMiter = false;\n\n\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\tnextPointR.copy( innerPoint );\n\t\t\t\t\t\t\tcurrentPointR.copy( innerPoint );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tnextPointL.copy( innerPoint );\n\t\t\t\t\t\t\tcurrentPointL.copy( innerPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// The segment triangles are generated here if there was overlapping\n\n\t\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( style.strokeLineJoin ) {\n\n\t\t\t\t\t\tcase 'bevel':\n\n\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'round':\n\n\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t// Join triangles\n\n\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, currentPointL, nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, nextPointR, currentPointR, u1, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'miter':\n\t\t\t\t\t\tcase 'miter-clip':\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconst miterFraction = ( strokeWidth2 * style.strokeMiterLimit ) / miterLength2;\n\n\t\t\t\t\t\t\tif ( miterFraction < 1 ) {\n\n\t\t\t\t\t\t\t\t// The join miter length exceeds the miter limit\n\n\t\t\t\t\t\t\t\tif ( style.strokeLineJoin !== 'miter-clip' ) {\n\n\t\t\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t\t\t// Miter-clip join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointL ).multiplyScalar( miterFraction ).add( currentPointL );\n\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointL ).multiplyScalar( miterFraction ).add( nextPointL );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointR ).multiplyScalar( miterFraction ).add( currentPointR );\n\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointR ).multiplyScalar( miterFraction ).add( nextPointR );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Miter join segment triangles\n\n\t\t\t\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\t\t\t\t// Optimized segment + join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\tnextPointL.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tnextPointR.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Add extra miter join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tisMiter = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// The segment triangles are generated here when two consecutive points are collinear\n\n\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// The segment triangles are generated here if it is the ending segment\n\n\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t}\n\n\t\t\tif ( ! isClosed && iPoint === numPoints - 1 ) {\n\n\t\t\t\t// Start line endcap\n\t\t\t\taddCapGeometry( points[ 0 ], point0L, point0R, joinIsOnLeftSide, true, u0 );\n\n\t\t\t}\n\n\t\t\t// Increment loop variables\n\n\t\t\tu0 = u1;\n\n\t\t\tpreviousPoint = currentPoint;\n\n\t\t\tlastPointL.copy( nextPointL );\n\t\t\tlastPointR.copy( nextPointR );\n\n\t\t}\n\n\t\tif ( ! isClosed ) {\n\n\t\t\t// Ending line endcap\n\t\t\taddCapGeometry( currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1 );\n\n\t\t} else if ( innerSideModified && vertices ) {\n\n\t\t\t// Modify path first segment vertices to adjust to the segments inner and outer intersections\n\n\t\t\tlet lastOuter = outerPoint;\n\t\t\tlet lastInner = innerPoint;\n\n\t\t\tif ( initialJoinIsOnLeftSide !== joinIsOnLeftSide ) {\n\n\t\t\t\tlastOuter = innerPoint;\n\t\t\t\tlastInner = outerPoint;\n\n\t\t\t}\n\n\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\tif ( isMiter || initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\tlastInner.toArray( vertices, 0 * 3 );\n\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\tlastOuter.toArray( vertices, 1 * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( isMiter || ! initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\tlastInner.toArray( vertices, 1 * 3 );\n\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\tlastOuter.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn numVertices;\n\n\t\t// -- End of algorithm\n\n\t\t// -- Functions\n\n\t\tfunction getNormal( p1, p2, result ) {\n\n\t\t\tresult.subVectors( p2, p1 );\n\t\t\treturn result.set( - result.y, result.x ).normalize();\n\n\t\t}\n\n\t\tfunction addVertex( position, u, v ) {\n\n\t\t\tif ( vertices ) {\n\n\t\t\t\tvertices[ currentCoordinate ] = position.x;\n\t\t\t\tvertices[ currentCoordinate + 1 ] = position.y;\n\t\t\t\tvertices[ currentCoordinate + 2 ] = 0;\n\n\t\t\t\tif ( normals ) {\n\n\t\t\t\t\tnormals[ currentCoordinate ] = 0;\n\t\t\t\t\tnormals[ currentCoordinate + 1 ] = 0;\n\t\t\t\t\tnormals[ currentCoordinate + 2 ] = 1;\n\n\t\t\t\t}\n\n\t\t\t\tcurrentCoordinate += 3;\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvs[ currentCoordinateUV ] = u;\n\t\t\t\t\tuvs[ currentCoordinateUV + 1 ] = v;\n\n\t\t\t\t\tcurrentCoordinateUV += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnumVertices += 3;\n\n\t\t}\n\n\t\tfunction makeCircularSector( center, p1, p2, u, v ) {\n\n\t\t\t// param p1, p2: Points in the circle arc.\n\t\t\t// p1 and p2 are in clockwise direction.\n\n\t\t\ttempV2_1.copy( p1 ).sub( center ).normalize();\n\t\t\ttempV2_2.copy( p2 ).sub( center ).normalize();\n\n\t\t\tlet angle = Math.PI;\n\t\t\tconst dot = tempV2_1.dot( tempV2_2 );\n\t\t\tif ( Math.abs( dot ) < 1 ) angle = Math.abs( Math.acos( dot ) );\n\n\t\t\tangle /= arcDivisions;\n\n\t\t\ttempV2_3.copy( p1 );\n\n\t\t\tfor ( let i = 0, il = arcDivisions - 1; i < il; i ++ ) {\n\n\t\t\t\ttempV2_4.copy( tempV2_3 ).rotateAround( center, angle );\n\n\t\t\t\taddVertex( tempV2_3, u, v );\n\t\t\t\taddVertex( tempV2_4, u, v );\n\t\t\t\taddVertex( center, u, 0.5 );\n\n\t\t\t\ttempV2_3.copy( tempV2_4 );\n\n\t\t\t}\n\n\t\t\taddVertex( tempV2_4, u, v );\n\t\t\taddVertex( p2, u, v );\n\t\t\taddVertex( center, u, 0.5 );\n\n\t\t}\n\n\t\tfunction makeSegmentTriangles() {\n\n\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\taddVertex( currentPointL, u1, 1 );\n\t\t\taddVertex( currentPointR, u1, 0 );\n\n\t\t}\n\n\t\tfunction makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u ) {\n\n\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t// Optimized segment + bevel triangles\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bevel join triangle. The segment triangles are done in the main loop\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified ) {\n\n\t\t\tif ( innerSideModified ) {\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( nextPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPointR, u0, 1 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( nextPointR, u0, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addCapGeometry( center, p1, p2, joinIsOnLeftSide, start, u ) {\n\n\t\t\t// param center: End point of the path\n\t\t\t// param p1, p2: Left and right cap points\n\n\t\t\tswitch ( style.strokeLineCap ) {\n\n\t\t\t\tcase 'round':\n\n\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\tmakeCircularSector( center, p2, p1, u, 0.5 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmakeCircularSector( center, p1, p2, u, 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'square':\n\n\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\ttempV2_1.subVectors( p1, center );\n\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 3 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttempV2_1.subVectors( p2, center );\n\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\tconst vl = vertices.length;\n\n\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'butt':\n\t\t\t\tdefault:\n\n\t\t\t\t\t// Nothing to do here\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction removeDuplicatedPoints( points ) {\n\n\t\t\t// Creates a new array if necessary with duplicated points removed.\n\t\t\t// This does not remove duplicated initial and ending points of a closed path.\n\n\t\t\tlet dupPoints = false;\n\t\t\tfor ( let i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) < minDistance ) {\n\n\t\t\t\t\tdupPoints = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! dupPoints ) return points;\n\n\t\t\tconst newPoints = [];\n\t\t\tnewPoints.push( points[ 0 ] );\n\n\t\t\tfor ( let i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) >= minDistance ) {\n\n\t\t\t\t\tnewPoints.push( points[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnewPoints.push( points[ points.length - 1 ] );\n\n\t\t\treturn newPoints;\n\n\t\t}\n\n\t}\n\n\n}\n\nexport { SVGLoader };\n"],"names":["SVGLoader","constructor","manager","super","this","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","isDefsNode","nodeName","parseStyle","parseCSSStylesheet","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","href","getAttributeNS","usedNodeId","substring","usedNode","viewportElement","getElementById","warn","undefined","fill","color","setStyle","transformPath","currentTransform","paths","push","userData","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data","slice","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","definitions","Object","fromEntries","entries","v","stylesheets","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current","partial","SyntaxError","newNumber","Number","pow","Array","isArray","includes","test","units","unitConversion","string","scale","theUnit","String","n","u","endsWith","parseFloat","parseNodeTransform","premultiply","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","makeTranslation","tempTransform2","makeRotation","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","transfEllipseGeneric","curve","xRadius","yRadius","cosTheta","aRotation","sinTheta","v1","f1","f2","mF","mFInv","invert","mFInvT","transpose","mQ","multiply","mQe","elements","ed","eigenDecomposition","rt1sqrt","rt1","rt2sqrt","rt2","atan2","sn","cs","isFullEllipse","aEndAngle","aStartAngle","EPSILON","mDsqrt","mRT","mDRF","transformAngle","phi","cosR","sinR","isTransformFlipped","aClockwise","transfEllipseNoSkew","sx","getTransformScaleX","sy","getTransformScaleY","subPath","isLineCurve","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","isTransformSkewed","te","basisDot","A","B","C","t","sm","df","rt","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","static","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","i2","isHoleTo","simplePath","allPaths","scanlineMinX","scanlineMaxX","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","simplePaths","getPoints","maxY","minY","maxX","minX","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","hole","width","lineJoin","lineCap","miterLimit","strokeColor","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","nextPoint","previousPoint","strokeWidth2","deltaU","u1","innerSideModified","joinIsOnLeftSide","isMiter","u0","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","p2","position","il","rotateAround","addVectors","vl","dupPoints","distanceTo","newPoints"],"sourceRoot":""}